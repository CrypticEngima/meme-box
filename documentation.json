{
    "pipes": [
        {
            "name": "MediaTypeClassPipe",
            "id": "pipe-MediaTypeClassPipe-a7bd2a11dbc9b159edafa20de4391481",
            "file": "src/app/target-screen/media-type-class.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MediaType"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MediaType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": true,
            "ngname": "mediaTypeClass",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\nimport { MediaType } from \"@memebox/contracts\";\n\n@Pipe({\n  name: \"mediaTypeClass\",\n  pure: true,\n})\nexport class MediaTypeClassPipe implements PipeTransform {\n  transform(value: MediaType): string {\n    switch (value) {\n      case MediaType.Picture:\n        return \"image\";\n      case MediaType.Video:\n        return \"video\";\n      case MediaType.Audio:\n        return \"audio\";\n      case MediaType.IFrame:\n        return \"iframe\";\n      default:\n        return \"\";\n    }\n  }\n}\n"
        },
        {
            "name": "MediaTypePipe",
            "id": "pipe-MediaTypePipe-725f084870cd0ee4606cc251ebf02b1c",
            "file": "src/app/manage/media/media-overview/media-info/media-type.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "MediaType"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MediaType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": true,
            "ngname": "mediaType",
            "sourceCode": "import {Pipe, PipeTransform} from '@angular/core';\nimport {MediaType} from \"@memebox/contracts\";\n\n@Pipe({\n  name: 'mediaType',\n  pure: true\n})\nexport class MediaTypePipe implements PipeTransform {\n\n  transform(value: MediaType): string {\n    switch (value) {\n      case MediaType.Picture:\n        return 'Image';\n      case MediaType.Video:\n        return 'Video';\n      case MediaType.Audio:\n        return 'Audio';\n      default:\n        return '';\n    }\n  }\n\n}\n"
        },
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-161846b9f017f1dafdfdf299ff40e148",
            "file": "src/app/core/pipes/safe-url/safe-url.pipe.ts",
            "type": "pipe",
            "description": "<p>We need to sanitize a url for a IFrame to avoid unsafe value error.\nmore info : <a href=\"https://stackoverflow.com/questions/38037760/how-to-set-iframe-src-without-causing-unsafe-value-exception\">https://stackoverflow.com/questions/38037760/how-to-set-iframe-src-without-causing-unsafe-value-exception</a></p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeResourceUrl",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeurl",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer, SafeResourceUrl } from \"@angular/platform-browser\";\n\n/**\n * We need to sanitize a url for a IFrame to avoid unsafe value error.\n * more info : https://stackoverflow.com/questions/38037760/how-to-set-iframe-src-without-causing-unsafe-value-exception\n */\n@Pipe({ name: \"safeurl\" })\nexport class SafePipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {}\n  transform(url: string): SafeResourceUrl {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "currentMediaFiles",
                    "type": "FileInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "offlineMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 97
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SettingsState"
        },
        {
            "name": "Clip",
            "id": "interface-Clip-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "clipLength",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "playLength",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "previewUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "type": "MediaType",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "volumeSetting",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "HasId"
        },
        {
            "name": "CombinedClip",
            "id": "interface-CombinedClip-5c78540221447d48d378f522d5cb0738",
            "file": "src/app/target-screen/target-screen.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, OnDestroy, OnInit} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from \"rxjs\";\nimport {Clip, Dictionary, ScreenClip} from \"@memebox/contracts\";\nimport {distinctUntilChanged, filter, map, pairwise, take, takeUntil, withLatestFrom} from \"rxjs/operators\";\nimport {AppQueries} from \"../state/app.queries\";\nimport {AppService} from \"../state/app.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {KeyValue} from \"@angular/common\";\nimport {WebsocketService} from \"../core/services/websocket.service\";\n\ninterface CombinedClip {\n  clip: Clip;\n  clipSetting: ScreenClip;\n  backgroundColor: string;\n}\n\n@Component({\n  selector: 'app-target-screen',\n  templateUrl: './target-screen.component.html',\n  styleUrls: ['./target-screen.component.scss']\n})\nexport class TargetScreenComponent implements OnInit, OnDestroy {\n\n  log = [];\n\n  debug$ = this.route.queryParams.pipe(\n    map(queryParams => queryParams['debug'] === 'true')\n  );\n\n  screenId$ = new BehaviorSubject<string>(null);\n\n  assignedClipsMap$ = combineLatest([\n    this.screenId$.pipe(\n      filter(screenId => !!screenId)\n    ),\n    this.appQuery.screenMap$.pipe(\n      filter(screenMap => !!screenMap)\n    )\n  ]).pipe(\n    filter(([screenId, screenMap]) => !!screenMap[screenId]),\n    map(([screenId, screenMap]) => screenMap[screenId].clips)\n  );\n\n  mediaClipMap$: Observable<Dictionary<CombinedClip>> = combineLatest([\n    this.assignedClipsMap$,\n    this.appQuery.clipMap$\n  ]).pipe(\n    map(([assignedClips, allClips]) => {\n      const result: Dictionary<CombinedClip> = {};\n\n      for (const [key, entry] of Object.entries(assignedClips)) {\n        result[key] = {\n          clipSetting: entry,\n          clip: allClips[key],\n          backgroundColor: this.random_rgba()\n        }\n      }\n\n      return result;\n    })\n  );\n  mediaClipToShow$ = new BehaviorSubject<string>(null);\n  clipToControlMap = new WeakMap<Clip, HTMLVideoElement | HTMLAudioElement | HTMLImageElement>();\n\n  private _destroy$ = new Subject();\n\n  constructor(private appQuery: AppQueries,\n              private appService: AppService,\n              private route: ActivatedRoute,\n              private wsService: WebsocketService,\n              private element: ElementRef<HTMLElement>) {\n  }\n\n\n  ngOnInit(): void {\n    this.appService.loadState();\n\n    this.debug$.pipe(\n      distinctUntilChanged(),\n      takeUntil(this._destroy$)\n    ).subscribe(value => {\n      if (value) {\n        this.element.nativeElement.classList.add('debug-mode');\n      } else{\n        this.element.nativeElement.classList.remove('debug-mode');\n      }\n    })\n\n    const thisScreenId = this.route.snapshot.params.guid;\n\n    this.wsService.onOpenConnection$.pipe(\n      take(1)\n    ).subscribe(value => {\n      this.wsService.sendI_Am_OBS(thisScreenId);\n    })\n\n    this.wsService.onUpdateData$.pipe(\n      takeUntil(this._destroy$),\n    ).subscribe(value => {\n      this.appService.loadState();\n    });\n\n    this.wsService.onTriggerClip$.pipe(\n      takeUntil(this._destroy$)\n    ).subscribe(clip => {\n      if (clip.targetScreen === thisScreenId) {\n        console.error('YES TRIGGERING IT', {clip});\n\n        this.mediaClipToShow$.next(clip.id);\n      }\n    });\n\n    this.screenId$.next(this.route.snapshot.params.guid);\n\n    // TODO Fix , multiple triggers of clips..\n    // Only one clip can shown at once\n    // if a 2nd one is added, it can hide the first one ...\n\n    this.mediaClipToShow$.pipe(\n      filter(clip => !!clip),\n      withLatestFrom(this.mediaClipMap$),\n      takeUntil(this._destroy$)\n    ).subscribe(([clipIdToPlay, mediaClipMap]) => {\n      const mediaInformation = mediaClipMap[clipIdToPlay];\n\n      const control = this.clipToControlMap.get(mediaInformation.clip);\n\n      if (control instanceof HTMLAudioElement\n        || control instanceof HTMLVideoElement) {\n        control.currentTime = 0;\n        control.play();\n        console.info('play', control.readyState);\n      }\n\n      if (mediaInformation.clip.playLength) {\n        setTimeout(() => {\n          this.mediaClipToShow$.next(null);\n        }, mediaInformation.clip.playLength)\n      }\n    });\n\n    this.mediaClipToShow$.pipe(\n      pairwise(),\n      withLatestFrom(this.mediaClipMap$),\n      takeUntil(this._destroy$)\n    ).subscribe(([[prev, current], mediaClipMap]) => {\n      if (prev) {\n        const mediaInformation = mediaClipMap[prev];\n\n        const control = this.clipToControlMap.get(mediaInformation.clip);\n\n        if (control instanceof HTMLMediaElement) {\n          control.pause();\n          control.currentTime = 0;\n        }\n      }\n    })\n  }\n\n  addLog(load: string, $event: Event) {\n    console.info({load, $event});\n\n    this.log.push({\n      load,\n      $event,\n      time: new Date()\n    });\n  }\n\n  shouldPlay$(key: string) {\n    return this.mediaClipToShow$.pipe(\n      filter(mediaToShow => mediaToShow === key)\n    )\n  }\n\n  addToMap(value: Clip, element: any) {\n    this.clipToControlMap.set(value, element);\n  }\n\n  hideIfStillPlaying(entry: KeyValue<string, CombinedClip>) {\n    const currentlyPlaying = this.mediaClipToShow$.value;\n\n    if (currentlyPlaying == entry.key) {\n      this.mediaClipToShow$.next(null);\n    }\n  }\n\n  random_rgba() {\n    var o = Math.round, r = Math.random, s = 255;\n    return 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',0.34)';\n  }\n\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "clip",
                    "type": "Clip",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "clipSetting",
                    "type": "ScreenClip",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Config",
            "id": "interface-Config-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "mediaFolder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "twitchChannel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ConfirmationsPayload",
            "id": "interface-ConfirmationsPayload-f3dc87a8d20d09234c5a71f6d02afbe4",
            "file": "src/app/shared/components/dialogs/simple-confirmation-dialog/simple-confirmation-dialog.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\n\nexport interface ConfirmationsPayload {\n  title: string;\n  content?: string;\n}\n\n@Component({\n  selector: 'app-simple-confirmation-dialog',\n  templateUrl: './simple-confirmation-dialog.component.html',\n  styleUrls: ['./simple-confirmation-dialog.component.css']\n})\nexport class SimpleConfirmationDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ConfirmationsPayload) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "properties": [
                {
                    "name": "content",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Dictionary",
            "id": "interface-Dictionary-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-14d883d37cffaf11aaa631e48cf9bc6c",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "T",
                    "line": 12
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "FileInfo",
            "id": "interface-FileInfo-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "apiUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "ext",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "fileName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "fileType",
                    "type": "MediaType",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "fullPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HasId",
            "id": "interface-HasId-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NetworkInfo",
            "id": "interface-NetworkInfo-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "ifname",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Screen",
            "id": "interface-Screen-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "clips",
                    "type": "Dictionary<ScreenClip>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "HasId"
        },
        {
            "name": "ScreenClip",
            "id": "interface-ScreenClip-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "bottom",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "height",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "hideAfter",
                    "type": "HideAfterType",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "hideAfterValue",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "imgFit",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "left",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "position",
                    "type": "PositionEnum",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "right",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "top",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "width",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "HasId"
        },
        {
            "name": "ScreenClipOptionsPayload",
            "id": "interface-ScreenClipOptionsPayload-ccc310a32feb40a8f49e5d2ba48733f7",
            "file": "src/app/shared/components/dialogs/screen-clip-options/screen-clip-options.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {AppQueries} from \"../../../../state/app.queries\";\nimport {Observable, Subject} from \"rxjs\";\nimport {PositionEnum, ScreenClip} from \"@memebox/contracts\";\nimport {map, takeUntil} from \"rxjs/operators\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {FormBuilder} from \"@angular/forms\";\nimport {AppService} from \"../../../../state/app.service\";\nimport {SnackbarService} from \"../../../../core/services/snackbar.service\";\n\nexport interface ScreenClipOptionsPayload {\n  screenId: string;\n  clipId: string;\n  name: string;\n}\n\n@Component({\n  selector: 'app-screen-clip-options',\n  templateUrl: './screen-clip-options.component.html',\n  styleUrls: ['./screen-clip-options.component.scss']\n})\nexport class ScreenClipOptionsComponent implements OnInit {\n\n  public form = new FormBuilder().group({\n    id: '',\n    width: '',\n    height: '',\n\n    position: PositionEnum.FullScreen,\n    left: '',\n    right: '',\n    bottom: '',\n    top: '',\n    imgFit: '', // todo image fit setting as enum\n  })\n\n  public clipInfo$: Observable<ScreenClip> = this.appQueries.screenMap$.pipe(\n    map(screenMap => screenMap[this.data.screenId].clips[this.data.clipId])\n  );\n  private _clipInfo: ScreenClip = null;\n  private destroy$ = new Subject();\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ScreenClipOptionsPayload,\n              private dialogRef: MatDialogRef<any>,\n              private appQueries: AppQueries,\n              private appService: AppService,\n              private snackBar: SnackbarService) {\n  }\n\n  ngOnInit(): void {\n    this.clipInfo$.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(value => {\n      this._clipInfo = {\n        position: PositionEnum.FullScreen,\n        ...value\n      };\n\n      this.form.reset(this._clipInfo);\n    })\n  }\n\n  async save() {\n    if (!this.form.valid) {\n      // highlight hack\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    const {value} = this.form;\n\n    const newScreenClipValue: ScreenClip = {\n      ...this._clipInfo,\n      ...value\n    };\n\n    await this.appService.addOrUpdateScreenClip(this.data.screenId, newScreenClipValue);\n\n    // todo refactor \"better way?\" to trigger those snackbars\n    this.snackBar.normal(`Screen / Clip Assignment updated 🎉`);\n\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "clipId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "screenId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ScreenViewEntry",
            "id": "interface-ScreenViewEntry-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Screen"
        },
        {
            "name": "SettingsState",
            "id": "interface-SettingsState-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "clips",
                    "type": "Dictionary<Clip>",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "config",
                    "type": "Partial<Config>",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "screen",
                    "type": "Dictionary<Screen>",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "twitchEvents",
                    "type": "Dictionary<Twitch>",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Settings.json - State</p>\n",
            "methods": []
        },
        {
            "name": "TriggerClip",
            "id": "interface-TriggerClip-caddd6448114a5f4256d2a2b882b8885",
            "file": "projects/contracts/src/lib/actions.ts",
            "type": "interface",
            "sourceCode": "export interface TriggerClip {\n  id: string;\n  targetScreen?: string;\n  repeatX?: number;\n  repeatSecond?: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "repeatSecond",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "repeatX",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "targetScreen",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Twitch",
            "id": "interface-Twitch-14d883d37cffaf11aaa631e48cf9bc6c",
            "file": "projects/contracts/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export enum MediaType {\n  Picture,\n  Audio,\n  Video,\n  IFrame,\n}\n\nexport interface HasId {\n  id: string;\n}\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\nexport interface Clip extends HasId {\n  name: string;\n  previewUrl: string;\n  volumeSetting: number; //  XX / 100 in percent\n  clipLength?: number; // optional,ms , simple images / gif dont have any length\n  playLength: number; // ms, time to play of this clip\n  path: string;\n  type: MediaType;\n}\n\nexport interface Screen  extends HasId {\n  name: string;\n  clips: Dictionary<ScreenClip>;\n}\n\nexport enum PositionEnum {\n  FullScreen,\n  Absolute,\n  // others...\n}\n\nexport enum HideAfterType {\n  Playing,\n  Milliseconds,\n  Repeats // maybe?\n}\n\nexport interface ScreenClip extends HasId  {\n  // later some other settings like position and stuff\n  width?: string; // 60%, 720px\n  height?: string;\n\n  position?: PositionEnum;\n  left?: string;\n  right?: string;\n  bottom?: string;\n  top?: string;\n  imgFit?: string;\n\n  hideAfter?: HideAfterType;\n  hideAfterValue?: any;\n}\n\nexport interface ScreenViewEntry extends Screen {\n  url: string;\n}\n\nexport const enum TwitchEventTypes {\n  message = 'message',\n  follow = 'follow',\n  sub = 'sub',\n  bits = 'bits',\n  raid = 'raid',\n  host = 'host',\n  channelPoints = 'channelPoints'\n}\n\nexport interface Twitch extends HasId {\n  name: string;\n  // screenId:      string; // TODO\n  clipId:     string;\n  event: TwitchEventTypes;\n  contains?: string; // additional settings TODO\n  active: boolean;\n  // !magic\n  // TODO other options per type\n}\n\n/**\n * Settings.json - State\n */\nexport interface SettingsState {\n  clips: Dictionary<Clip>;\n  twitchEvents: Dictionary<Twitch>;\n  screen: Dictionary<Screen>;\n\n  config:  Partial<Config>;\n}\n\nexport interface AppState extends SettingsState {\n  currentMediaFiles: FileInfo[];\n  offlineMode: boolean;\n}\n\nexport interface Config {\n  mediaFolder:   string;\n  twitchChannel: string;\n}\n\nexport interface NetworkInfo {\n  ifname: string;\n  address: string;\n}\n\n//TODO: Fix later and forget about the TODO LUL\n\nexport interface FileInfo {\n  fullPath: string;\n  fileName: string;\n  apiUrl: string;\n  ext: string;\n  fileType: MediaType;\n}\n",
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "clipId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "contains",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "event",
                    "type": "TwitchEventTypes",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "HasId"
        }
    ],
    "injectables": [
        {
            "name": "AppQueries",
            "id": "injectable-AppQueries-91c696488e5eea54be8667216fe82c81",
            "file": "src/app/state/app.queries.ts",
            "properties": [
                {
                    "name": "clipList$",
                    "defaultValue": "this.select(store => Object.values(store.clips))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "clipMap$",
                    "defaultValue": "this.select(store => store.clips)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "config$",
                    "defaultValue": "this.select(store => store.config)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentMediaFile$",
                    "defaultValue": "this.select(store => store.currentMediaFiles)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inOfflineMode$",
                    "defaultValue": "this.select(store => store.offlineMode)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "screenMap$",
                    "defaultValue": "this.select(store => store.screen)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "screensList$",
                    "defaultValue": "this.select(store => Object.values(store.screen))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "state$",
                    "defaultValue": "this.select().pipe(\n\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "twitchEvent$",
                    "defaultValue": "this.select(store => Object.values(store.twitchEvents))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {Query} from \"@datorama/akita\";\nimport {AppState} from \"@memebox/contracts\";\nimport {AppStore} from \"./app.store\";\nimport {AppService} from \"./app.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppQueries extends Query<AppState> {\n  state$ = this.select().pipe(\n\n  );\n\n  clipList$ = this.select(store => Object.values(store.clips));\n  screensList$ = this.select(store => Object.values(store.screen));\n  twitchEvent$ = this.select(store => Object.values(store.twitchEvents));\n\n  clipMap$ = this.select(store => store.clips);\n  screenMap$ = this.select(store => store.screen);\n  config$ = this.select(store => store.config);\n  currentMediaFile$ = this.select(store => store.currentMediaFiles);\n  inOfflineMode$ = this.select(store => store.offlineMode);\n\n  constructor(protected store: AppStore,\n              protected service: AppService) {\n    super(store);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "AppStore"
                    },
                    {
                        "name": "service",
                        "type": "AppService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "AppStore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "AppService",
            "id": "injectable-AppService-59e7688468ba9324cb8f41189910e658",
            "file": "src/app/state/app.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addOrUpdateClip",
                    "args": [
                        {
                            "name": "clip",
                            "type": "Clip"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "clip",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOrUpdateScreen",
                    "args": [
                        {
                            "name": "url",
                            "type": "Screen"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "Screen",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOrUpdateScreenClip",
                    "args": [
                        {
                            "name": "screenId",
                            "type": "string"
                        },
                        {
                            "name": "obsClip",
                            "type": "Partial<ScreenClip>"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obsClip",
                            "type": "Partial<ScreenClip>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOrUpdateTwitchEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Twitch"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Twitch",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addScreenClipById",
                    "args": [
                        {
                            "name": "screenId",
                            "type": "string"
                        },
                        {
                            "name": "clipId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clipId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteClip",
                    "args": [
                        {
                            "name": "clipId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "clipId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScreen",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScreenClip",
                    "args": [
                        {
                            "name": "screenId",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 182,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTwitchEvent",
                    "args": [
                        {
                            "name": "clipId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 219,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "clipId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillDummyData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267
                },
                {
                    "name": "listFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openMediaFolder",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 262,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "updateMediaFolder",
                    "args": [
                        {
                            "name": "newFolder",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 231,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newFolder",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTwitchChannel",
                    "args": [
                        {
                            "name": "twitchChannel",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 245,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "twitchChannel",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {AppStore} from \"./app.store\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Clip, Config, ENDPOINTS, FileInfo, Screen, ScreenClip, Twitch} from \"@memebox/contracts\";\nimport {API_PREFIX, EXPRESS_PORT, FILES_ENDPOINT, FILES_OPEN_ENDPOINT} from \"../../../server/constants\";\nimport {SnackbarService} from \"../core/services/snackbar.service\";\n\nexport const EXPRESS_BASE = `http://${location.hostname}:${EXPRESS_PORT}`;\nexport const API_BASE = `${EXPRESS_BASE}${API_PREFIX}/`;\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n  constructor(private appStore: AppStore,\n              private http: HttpClient,\n              private snackbar: SnackbarService) {\n  }\n\n  public loadState() {\n    this.appStore.setLoading(true);\n\n    this.http.get(API_BASE).pipe(\n      // delay(5000)\n    ).subscribe(\n      value => {\n        console.info('LOADED STATE', value);\n        this.appStore.update(state => value);\n\n        console.info('UPDATED STATE', value);\n        this.appStore.setLoading(false);\n      }, (error: Error) => {\n        if (error.name === 'HttpErrorResponse') {\n        this.appStore.update(state => {\n          state.offlineMode = true;\n        });\n          console.error('Changing into offline mode', error);\n        }\n\n      }\n    )\n  }\n\n  public listFiles() {\n    this.http.get<FileInfo[]>(`${EXPRESS_BASE}${FILES_ENDPOINT}`).pipe(\n      // delay(5000)\n    ).subscribe(\n      value => {\n        console.info('LOADED FILES ', value);\n        this.appStore.update(state => {\n          state.currentMediaFiles = value;\n        });\n      }\n    )\n  }\n\n  public async addOrUpdateClip(clip: Clip) {\n    let newClipId = clip?.id ?? '';\n\n    if (newClipId === '') {\n      // add the clip to api & await\n      newClipId = await this.http.post<string>(`${API_BASE}${ENDPOINTS.CLIPS}`, clip, {\n        responseType: 'text' as any\n      }).toPromise();\n\n      clip.id = newClipId;\n    } else {\n      // add the clip to api & await\n      await this.http.put<string>(`${API_BASE}${ENDPOINTS.CLIPS}/${newClipId}`, clip).toPromise();\n    }\n\n    // add to the state\n    this.appStore.update(state => {\n      state.clips[newClipId] = clip;\n    });\n  }\n\n  public async deleteClip(clipId: string) {\n    // send the api call\n    await this.http.delete(`${API_BASE}${ENDPOINTS.CLIPS}/${clipId}`).toPromise();\n\n    // remove from state\n    this.appStore.update(state => {\n      delete state.clips[clipId];\n    });\n\n    this.snackbar.normal('Media deleted!');\n  }\n\n\n  public async addOrUpdateScreen(url: Screen) {\n    let screensAvailable = Object.keys(this.appStore.getValue().screen).length > 0;\n    let newId = url?.id ?? '';\n\n    if (newId === '') {\n      // add the clip to api & await\n      newId = await this.http.post<string>(`${API_BASE}${ENDPOINTS.SCREEN}`, url, {\n        responseType: 'text' as any\n      }).toPromise();\n\n      url.id = newId;\n      url.clips = {};\n    } else {\n      // add the clip to api & await\n      await this.http.put<string>(`${API_BASE}${ENDPOINTS.SCREEN}/${newId}`, url).toPromise();\n    }\n\n    // add to the state\n    this.appStore.update(state => {\n      state.screen[newId] = url;\n    });\n\n    if (!screensAvailable) {\n      // add all current clips to this newly created screen\n\n      const allClips = Object.keys(this.appStore.getValue().clips);\n      for (const clipKey of allClips) {\n        await this.addScreenClipById(newId, clipKey);\n      }\n    }\n\n    this.snackbar.normal('Screen updated!');\n  }\n\n  public async deleteScreen(id: string) {\n    // send the api call\n    await this.http.delete(`${API_BASE}${ENDPOINTS.SCREEN}/${id}`).toPromise();\n\n    // remove from state\n    this.appStore.update(state => {\n      delete state.screen[id];\n    });\n\n    this.snackbar.normal('Screen removed!');\n  }\n\n  public async addScreenClipById(screenId: string, clipId: string) {\n\n    const screenClip: ScreenClip = {\n      id: clipId\n    };\n\n    // add the clip to api & await\n    await this.http.put<string>(`${API_BASE}${ENDPOINTS.SCREEN}/${screenId}/${ENDPOINTS.OBS_CLIPS}/${clipId}`, screenClip).toPromise();\n\n\n    // add to the state\n    this.appStore.update(state => {\n      state.screen[screenId].clips[clipId] = screenClip as ScreenClip;\n    });\n\n\n    this.snackbar.normal('Media saved!');\n  }\n\n  public async addOrUpdateScreenClip(screenId: string, obsClip: Partial<ScreenClip>) {\n    let newId = obsClip?.id ?? '';\n\n    if (newId === '') {\n      // add the clip to api & await\n      newId = await this.http.post<string>(`${API_BASE}${ENDPOINTS.SCREEN}/${screenId}/${ENDPOINTS.OBS_CLIPS}`, obsClip, {\n        responseType: 'text' as any\n      }).toPromise();\n\n      obsClip.id = newId;\n    } else {\n      // add the clip to api & await\n      await this.http.put<string>(`${API_BASE}${ENDPOINTS.SCREEN}/${screenId}/${ENDPOINTS.OBS_CLIPS}/${newId}`, obsClip).toPromise();\n    }\n\n    // add to the state\n    this.appStore.update(state => {\n      state.screen[screenId].clips[newId] = obsClip as ScreenClip;\n    });\n\n    // todo add added / updated\n    // todo add name?\n    this.snackbar.normal('Media added to screen!');\n  }\n\n  public async deleteScreenClip(screenId: string, id: string) {\n    // send the api call\n    await this.http.delete(`${API_BASE}${ENDPOINTS.SCREEN}/${screenId}/${ENDPOINTS.OBS_CLIPS}/${id}`).toPromise();\n\n    // remove from state\n    this.appStore.update(state => {\n      delete state.screen[screenId].clips[id];\n    });\n\n\n    this.snackbar.normal('Media removed from screen!');\n  }\n\n  public async addOrUpdateTwitchEvent(event: Twitch) {\n    let newId = event?.id ?? '';\n\n    if (newId === '') {\n      // add the clip to api & await\n      newId = await this.http.post<string>(`${API_BASE}${ENDPOINTS.TWITCH_EVENTS}`, event, {\n        responseType: 'text' as any\n      }).toPromise();\n\n      event.id = newId;\n    } else {\n      // add the clip to api & await\n      await this.http.put<string>(`${API_BASE}${ENDPOINTS.TWITCH_EVENTS}/${newId}`, event).toPromise();\n    }\n\n    // add to the state\n    this.appStore.update(state => {\n      state.twitchEvents[newId] = event;\n    });\n\n\n    this.snackbar.normal('Twitch event added / updated (TODO)!');\n  }\n\n  public async deleteTwitchEvent(clipId: string) {\n    // send the api call\n    await this.http.delete(`${API_BASE}${ENDPOINTS.TWITCH_EVENTS}/${clipId}`).toPromise();\n\n    // remove from state\n    this.appStore.update(state => {\n      delete state.twitchEvents[clipId];\n    });\n\n    this.snackbar.normal('Twitch event removed!');\n  }\n\n  public async updateMediaFolder(newFolder: string) {\n    const newConfig = {\n      mediaFolder: newFolder\n    };\n\n    // update path & await\n    await this.http.put<string>(`${API_BASE}${ENDPOINTS.CONFIG_MEDIA_PATH}`, newConfig).toPromise();\n\n    // add to the state\n    this.appStore.update(state => {\n      state.config.mediaFolder = newFolder;\n    });\n  }\n\n  public async updateTwitchChannel(twitchChannel: string) {\n    const newConfig: Partial<Config> = {\n      twitchChannel: twitchChannel\n    };\n\n    // update path & await\n    await this.http.put<string>(`${API_BASE}${ENDPOINTS.CONFIG_TWITCH_CHANNEL}`, newConfig).toPromise();\n\n    // add to the state\n    this.appStore.update(state => {\n      state.config.twitchChannel = twitchChannel;\n    });\n\n\n    this.snackbar.normal('Twitch Channel updated!');\n  }\n\n  public async openMediaFolder() {\n    // update path & await\n    await this.http.get<string>(`${EXPRESS_BASE}${FILES_OPEN_ENDPOINT}`).toPromise();\n  }\n\n  fillDummyData() {\n    this.appStore.update(state => {\n      state.screen[\"356a0f2f-6d3a-4fbd-b2db-45b0fd97546a\"] = {\n        \"name\": \"Firefox\",\n        \"id\": \"356a0f2f-6d3a-4fbd-b2db-45b0fd97546a\",\n        \"clips\": {\n          \"cbdc0e82-d23f-4b94-96cc-c6438753ca53\": {\n            \"position\": 0,\n            \"id\": \"cbdc0e82-d23f-4b94-96cc-c6438753ca53\",\n            \"width\": \"50%\",\n            \"height\": \"60%\",\n            \"left\": null,\n            \"right\": null,\n            \"bottom\": null,\n            \"top\": null,\n            \"imgFit\": null\n          },\n          \"65e61814-2748-4176-ba88-e99ac411f920\": {\n            \"position\": 0,\n            \"id\": \"65e61814-2748-4176-ba88-e99ac411f920\",\n            \"width\": \"50%\",\n            \"height\": \"60%\",\n            \"left\": null,\n            \"right\": null,\n            \"bottom\": null,\n            \"top\": null,\n            \"imgFit\": null\n          },\n        }\n      };\n\n      state.clips = {\n        \"cbdc0e82-d23f-4b94-96cc-c6438753ca53\": {\n          \"id\": \"cbdc0e82-d23f-4b94-96cc-c6438753ca53\",\n          \"name\": \"Fill Murray\",\n          \"type\": 0,\n          \"volumeSetting\": 10,\n          \"clipLength\": null,\n          \"playLength\": 4000,\n          \"path\": \"https://www.fillmurray.com/460/300\",\n          \"previewUrl\": null\n        },\n        \"65e61814-2748-4176-ba88-e99ac411f920\": {\n          \"id\": \"65e61814-2748-4176-ba88-e99ac411f920\",\n          \"name\": \"Placekitten\",\n          \"type\": 0,\n          \"volumeSetting\": 100,\n          \"clipLength\": null,\n          \"playLength\": 4000,\n          \"path\": \"https://placekitten.com/408/287\",\n          \"previewUrl\": null\n        },\n      }\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appStore",
                        "type": "AppStore"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "appStore",
                        "type": "AppStore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AppStore",
            "id": "injectable-AppStore-1dc244e40805a5358e139c6eddfe64c6",
            "file": "src/app/state/app.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import {Store, StoreConfig} from '@datorama/akita';\nimport {AppState, createInitialState} from \"@memebox/contracts\";\nimport {Injectable} from \"@angular/core\";\nimport {produce} from 'immer'; // the best state helper!!\n\n@Injectable({providedIn: 'root'})\n@StoreConfig({name: 'state', producerFn: produce})\nexport class AppStore extends Store<AppState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-219fc2cfd15bee55d2f4d402f1876060",
            "file": "src/app/shared/components/dialogs/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>"
                        },
                        {
                            "name": "config",
                            "type": "MatDialogConfig<D>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<T, R>",
                    "typeParameters": [
                        "T",
                        "D",
                        "R"
                    ],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "MatDialogConfig<D>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showConfirmationDialog",
                    "args": [
                        {
                            "name": "payload",
                            "type": "ConfirmationsPayload"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "ConfirmationsPayload",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMediaEditDialog",
                    "args": [
                        {
                            "name": "clipInfo",
                            "type": "Partial<Clip>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "clipInfo",
                            "type": "Partial<Clip>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showScreenClipOptionsDialog",
                    "args": [
                        {
                            "name": "payload",
                            "type": "ScreenClipOptionsPayload"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "ScreenClipOptionsPayload",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showScreenEditDialog",
                    "args": [
                        {
                            "name": "screen",
                            "type": "Partial<Screen>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "screen",
                            "type": "Partial<Screen>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showTwitchEditDialog",
                    "args": [
                        {
                            "name": "info",
                            "type": "Partial<Twitch>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "info",
                            "type": "Partial<Twitch>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable, TemplateRef} from '@angular/core';\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {Clip, Screen, Twitch} from \"@memebox/contracts\";\nimport {ComponentType} from \"@angular/cdk/portal\";\nimport {MatDialogConfig} from \"@angular/material/dialog/dialog-config\";\nimport {MatDialogRef} from \"@angular/material/dialog/dialog-ref\";\nimport {\n  ConfirmationsPayload,\n  SimpleConfirmationDialogComponent\n} from \"./simple-confirmation-dialog/simple-confirmation-dialog.component\";\nimport {MediaEditComponent} from \"./media-edit/media-edit.component\";\nimport {ScreenEditComponent} from \"./screen-edit/screen-edit.component\";\nimport {\n  ScreenClipOptionsComponent,\n  ScreenClipOptionsPayload\n} from \"./screen-clip-options/screen-clip-options.component\";\nimport {TwitchEditComponent} from \"./twitch-edit/twitch-edit.component\";\n\n@Injectable()\nexport class DialogService {\n\n  constructor(\n    private _dialog: MatDialog\n  ) {\n\n  }\n\n  // any for now, until the confirmation dialog has its own enum\n  showConfirmationDialog(payload: ConfirmationsPayload): Promise<any> {\n    const dialogRef = this._dialog.open(SimpleConfirmationDialogComponent, {\n      data: payload,\n    });\n\n    return dialogRef.afterClosed().toPromise();\n  }\n\n  showMediaEditDialog(clipInfo: Partial<Clip>) {\n    this._dialog.open(\n      MediaEditComponent, {\n        data: clipInfo,\n        height: '600px',\n        width: '600px',\n      }\n    )\n  }\n\n  showScreenEditDialog(screen: Partial<Screen>) {\n    this._dialog.open(\n      ScreenEditComponent, {\n        data: screen\n      }\n    )\n  }\n\n  showScreenClipOptionsDialog(payload: ScreenClipOptionsPayload) {\n    this._dialog.open(\n      ScreenClipOptionsComponent, {\n        data: payload\n      }\n    )\n  }\n\n  showTwitchEditDialog(info: Partial<Twitch>) {\n    this._dialog.open(\n      TwitchEditComponent, {\n        data: info,\n      }\n    )\n  }\n\n  open<T, D = any, R = any>(\n    componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n    config?: MatDialogConfig<D>\n  ): MatDialogRef<T, R> {\n    return this._dialog.open(componentOrTemplateRef, config);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-40b311958a254d95c8cf2b98c32fa733",
            "file": "src/app/core/services/settings.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadSetting",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSetting",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n\n  constructor() {\n  }\n\n  public loadSetting(key: string, defaultValue?: string): string {\n    return localStorage.getItem(key) ?? defaultValue;\n  }\n\n  public saveSetting(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-3f7d5333d5e20475009523e9950e2e6d",
            "file": "src/app/core/services/snackbar.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "normal",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\n\n\nconst SNACKBAR_DURATION = 3000;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  constructor(private matSnackBar: MatSnackBar) {\n  }\n\n  normal(text: string) {\n    this.matSnackBar.open(text, null, {\n      duration: SNACKBAR_DURATION,\n      verticalPosition: 'top'\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WebsocketService",
            "id": "injectable-WebsocketService-063e874d48cfabeff80b03e770b62404",
            "file": "src/app/core/services/websocket.service.ts",
            "properties": [
                {
                    "name": "isConnected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onOpenConnection$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onTriggerClip$",
                    "defaultValue": "new Subject<TriggerClip>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onUpdateData$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ws",
                    "type": "WebSocket",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sendI_Am_OBS",
                    "args": [
                        {
                            "name": "guid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "guid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerClipOnScreen",
                    "args": [
                        {
                            "name": "clipId",
                            "type": "string"
                        },
                        {
                            "name": "screenId",
                            "type": "string | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "clipId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "screenId",
                            "type": "string | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {WS_PORT} from \"../../../../server/constants\";\nimport {TriggerClip} from \"@memebox/contracts\";\nimport {Subject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebsocketService {\n  public onOpenConnection$ = new Subject();\n  public onUpdateData$ = new Subject();\n  public onTriggerClip$ = new Subject<TriggerClip>();\n\n  private ws: WebSocket;\n  private isConnected = false;\n\n  constructor() {\n   setTimeout(() => this.connect(), 150);\n  }\n\n  public connect() {\n    if (this.isConnected) {\n      return;\n    }\n\n    this.ws = new WebSocket(`ws://${location.hostname}:${WS_PORT}`);\n\n    this.ws.onopen = ev => {\n      this.isConnected = true;\n      this.onOpenConnection$.next();\n    };\n\n    this.ws.onmessage = event => {\n      console.debug(\"WebSocket message received:\", event);\n\n      const dataAsString = event.data as string;\n\n      // console.error({dataAsString});\n\n      const [action, payload] = dataAsString.split('=');\n\n      switch (action) {\n        case 'TRIGGER_CLIP': {\n          const payloadObj: TriggerClip = JSON.parse(payload);\n\n          this.onTriggerClip$.next(payloadObj);\n\n          break;\n        }\n        case 'UPDATE_DATA': {\n          this.onUpdateData$.next();\n        }\n      }\n\n    };\n  }\n\n  public sendI_Am_OBS(guid: string) {\n    this.ws.send(`I_AM_OBS=${guid}`);\n  }\n\n\n  public triggerClipOnScreen(clipId: string, screenId?: string | null) {\n    const triggerObj: TriggerClip = {\n      id: clipId,\n      targetScreen: screenId,\n      repeatX: 0,  // todo after streamdeck ?\n      repeatSecond: 0,\n    }\n\n    this.ws.send(`TRIGGER_CLIP=${JSON.stringify(triggerObj)}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "WebviewDirective",
            "id": "directive-WebviewDirective-22037e4977fc14e1dd7ea25380880d0b",
            "file": "src/app/shared/directives/webview/webview.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {Directive} from '@angular/core';\n\n@Directive({\n  selector: 'webview'\n})\nexport class WebviewDirective {\n  constructor() {\n  }\n}\n",
            "selector": "webview",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            }
        }
    ],
    "components": [
        {
            "name": "AddEventComponent",
            "id": "component-AddEventComponent-d9bcfb33105b3aa6cf75950fdad9686b",
            "file": "src/app/manage/twitch/events-overview/add-event/add-event.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-event",
            "styleUrls": [
                "./add-event.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-event.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "added",
                    "defaultValue": "new EventEmitter<Twitch>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "clipList$",
                    "defaultValue": "this.appQueries.clipList$",
                    "type": "Observable<Clip[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormBuilder().group({\n    event: '',\n    clipId: ''\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "twitchEvents",
                    "defaultValue": "TwitchTypesArray",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "triggerAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {FormBuilder} from \"@angular/forms\";\nimport {Clip, Twitch, TwitchTypesArray} from \"@memebox/contracts\";\nimport {Observable} from \"rxjs\";\nimport {AppQueries} from \"../../../../state/app.queries\";\nimport {DialogService} from \"../../../../shared/components/dialogs/dialog.service\";\n\n@Component({\n  selector: 'app-add-event',\n  templateUrl: './add-event.component.html',\n  styleUrls: ['./add-event.component.css']\n})\nexport class AddEventComponent implements OnInit {\n\n  formGroup = new FormBuilder().group({\n    event: '',\n    clipId: ''\n  });\n\n  twitchEvents = TwitchTypesArray;\n  clipList$: Observable<Clip[]> = this.appQueries.clipList$;\n\n  @Output()\n  added = new EventEmitter<Twitch>();\n\n  constructor(private appQueries: AppQueries,\n              private dialog: DialogService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  triggerAdd() {\n    this.dialog.showTwitchEditDialog(null);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  background: #444;\n}\n\nform {\n  display: flex;\n  align-content: center;\n}\n\n/*\n  [XX][XX][X]\n*/\n\nmat-form-field {\n  flex: 2;\n  margin: 1rem;\n}\n\nbutton {\n  flex: 1;\n  align-self: center;\n  margin: 1rem;\n}\n",
                    "styleUrl": "./add-event.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<!--\n<form [formGroup]=\"formGroup\">\n  <mat-form-field>\n    <mat-label>Twitch Event</mat-label>\n    <mat-select [required]=\"true\"\n                formControlName=\"event\">\n      <mat-option *ngFor=\"let item of twitchEvents\"\n                  [value]=\"item\">\n        {{ item }}\n      </mat-option>\n    </mat-select>\n\n    <mat-error *ngIf=\"formGroup.controls['event'].hasError('required')\">\n      You need to choose an event-type?\n    </mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Meme</mat-label>\n    <mat-select [required]=\"true\"\n                formControlName=\"clipId\">\n\n      <mat-option *ngFor=\"let item of clipList$ | async\"\n                  [value]=\"item.id\">\n        {{ item.name }}\n      </mat-option>\n    </mat-select>\n\n    <mat-error *ngIf=\"formGroup.controls['clipId'].hasError('required')\">\n      You need to select a clip.\n    </mat-error>\n  </mat-form-field>\n</form>\n-->\n\n\n<button (click)=\"triggerAdd()\" color=\"primary\"\n        mat-flat-button>Add\n</button>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c2fa4b3f123ad4a271906cb42db904d6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n\n}\n\n\nmat-list-option.active {\n  background: #222;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-42dbccfc0b5c8d28436418aaf40c8128",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary: boolean;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ClipAssigningDialogComponent",
            "id": "component-ClipAssigningDialogComponent-5015219586ffca481d94606bcdda629b",
            "file": "src/app/manage/screen/screen-overview/clip-assigning-dialog/clip-assigning-dialog/clip-assigning-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clip-assigning-dialog",
            "styleUrls": [
                "./clip-assigning-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clip-assigning-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkedMap",
                    "type": "Dictionary<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "clips$",
                    "defaultValue": "combineLatest([\n    this.selectedFilters$,\n    this.appQueries.clipList$\n  ]).pipe(\n    map(([filters, clipList]) => {\n      return filters.length === 0\n        ? clipList\n        : clipList.filter(clip => filters.includes(clip.type))\n    })\n  )",
                    "type": "Observable<Clip[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "data",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "MediaType",
                    "defaultValue": "MediaType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "screen$",
                    "defaultValue": "this.appQueries.screenMap$.pipe(\n    map(screenMap => screenMap[this.data])\n  )",
                    "type": "Observable<Screen>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedFilters$",
                    "defaultValue": "new BehaviorSubject<MediaType[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "clickToSelect",
                    "args": [
                        {
                            "name": "clip",
                            "type": "Clip"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "clip",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "toggleFilter",
                    "args": [
                        {
                            "name": "type",
                            "type": "MediaType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "MediaType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\nimport {Clip, Dictionary, MediaType, Screen} from \"@memebox/contracts\";\nimport {BehaviorSubject, combineLatest, Observable, Subject} from \"rxjs\";\nimport {map, takeUntil} from \"rxjs/operators\";\nimport {AppQueries} from \"../../../../../state/app.queries\";\nimport {AppService} from \"../../../../../state/app.service\";\n\n@Component({\n  selector: 'app-clip-assigning-dialog',\n  templateUrl: './clip-assigning-dialog.component.html',\n  styleUrls: ['./clip-assigning-dialog.component.scss']\n})\nexport class ClipAssigningDialogComponent implements OnInit, OnDestroy {\n  MediaType = MediaType;\n\n  checkedMap: Dictionary<boolean>;\n\n  selectedFilters$ = new BehaviorSubject<MediaType[]>([]);\n  clips$: Observable<Clip[]> = combineLatest([\n    this.selectedFilters$,\n    this.appQueries.clipList$\n  ]).pipe(\n    map(([filters, clipList]) => {\n      return filters.length === 0\n        ? clipList\n        : clipList.filter(clip => filters.includes(clip.type))\n    })\n  );\n\n  screen$: Observable<Screen> = this.appQueries.screenMap$.pipe(\n    map(screenMap => screenMap[this.data])\n  );\n\n\n  private destroy$ = new Subject();\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: string,\n              private appQueries: AppQueries,\n              private appService: AppService) {\n  }\n\n  ngOnInit(): void {\n    this.screen$.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe((screen) => {\n      this.checkedMap = {};\n\n      Object.keys(screen.clips).forEach(clipId => {\n        this.checkedMap[clipId] = true;\n      });\n    })\n  }\n\n  clickToSelect(clip: Clip) {\n    const isSelected = this.checkedMap[clip.id] || false;\n\n\n    if (!isSelected) {\n      this.appService.addOrUpdateScreenClip(this.data, {\n        id: clip.id,\n      });\n    } else {\n      this.appService.deleteScreenClip(this.data, clip.id);\n    }\n\n    console.info(this.checkedMap, clip, isSelected);\n    // this.checkedMap[clip.id] = !isSelected;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  toggleFilter(type: MediaType) {\n    const currentFilters = [...this.selectedFilters$.getValue()];\n    const currentPosition = currentFilters.indexOf(type);\n\n    if (currentPosition !== -1) {\n      currentFilters.splice(currentPosition, 1);\n    } else {\n      currentFilters.push(type);\n    }\n\n    this.selectedFilters$.next(currentFilters);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~angular-material-css-vars/public-util';\n@import '../../../../../../utils/mixins';\n\n:host {\n  width: 100%;\n\n  ::ng-deep .mat-chip {\n    &.mat-chip.mat-standard-chip {\n      &.filterChip--selected {\n        background-color: mat-css-color-accent();\n      }\n    }\n  }\n}\n\n.filterRow {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 1rem 1rem 2rem 0;\n}\n\n.filterRow__icon {\n  margin-right: 1rem;\n}\n\n.mediaList {\n  @include gridLayout;\n  width: 100%;\n  list-style: none;\n}\n\n.mediaList__option {\n  margin-bottom: 1rem;\n  cursor: pointer;\n  padding: 0;\n  transition: padding 0.1s ease-in-out;\n  border-radius: 1rem;\n}\n\n.mediaList__option--selected {\n  background-color: #3F4855;\n  padding: 0.75rem;\n  border: 0.25rem solid #00d8d6;\n}\n\n.mediaList__img {\n  width: 100%;\n}\n\n.mediaList__name {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.mediaList__icon {\n  margin-right: 0.5em;\n}\n\n.mediaList__audioContainer, .mediaList__videoContainer {\n  height: 100%;\n  display: block;\n  position: relative;\n}\n\n//TODO this is weird\n.audio-image,\n.video-image {\n  display: flex;\n  height: 75%;\n  align-items: center;\n  justify-content: center;\n\n  .mat-icon {\n    height: 6rem;\n    width: 6rem;\n  }\n}\n\n.filterChip {\n  cursor: pointer;\n}\n.iframe-container {\n  .media-iframe-conatiner {\n    width: 100%;\n  }\n}\n\n.filterChip--selected {\n  background-color: red;\n}\n\n\n\n.svgContainer {\n  height: 1.5rem;\n  width: 1.5rem;\n  border-radius: 50%;\n  margin-left: 0.25rem;\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./clip-assigning-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "string"
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1 mat-dialog-title>Choose media for \"{{ (screen$ | async).name }}\"</h1>\n\n<div mat-dialog-content>\n  <div class=\"filterRow\">\n    <mat-icon class=\"filterRow__icon\" matListIcon svgIcon=\"filter\"></mat-icon>\n    <mat-chip-list *ngIf=\"selectedFilters$ | async as selectedFilters\" aria-label=\"Filter media type\">\n    <mat-chip (click)=\"toggleFilter(MediaType.Picture)\"\n              [class.filterChip--selected]=\"selectedFilters.includes(MediaType.Picture)\"\n              class=\"filterChip\">\n      Image\n      <span class=\"svgContainer\">\n        <mat-icon *ngIf=\"selectedFilters.includes(MediaType.Picture)\"\n                  svgIcon=\"check_circle\"></mat-icon>\n        <mat-icon *ngIf=\"!selectedFilters.includes(MediaType.Picture)\"\n                  svgIcon=\"circle\"></mat-icon>\n      </span>\n    </mat-chip>\n    <mat-chip (click)=\"toggleFilter(MediaType.Audio)\"\n              [class.filterChip--selected]=\"selectedFilters.includes(MediaType.Audio)\"\n              class=\"filterChip\">\n      Audio\n      <span class=\"svgContainer\">\n        <mat-icon *ngIf=\"selectedFilters.includes(MediaType.Audio)\"\n                  svgIcon=\"check_circle\"></mat-icon>\n       <mat-icon *ngIf=\"!selectedFilters.includes(MediaType.Audio)\"\n                 svgIcon=\"circle\"></mat-icon>\n      </span>\n    </mat-chip>\n    <mat-chip (click)=\"toggleFilter(MediaType.Video)\"\n              [class.filterChip--selected]=\"selectedFilters.includes(MediaType.Video)\"\n              class=\"filterChip\">\n      Video\n      <span class=\"svgContainer\">\n        <mat-icon *ngIf=\"selectedFilters.includes(MediaType.Video)\"\n                  svgIcon=\"check_circle\"></mat-icon>\n        <mat-icon *ngIf=\"!selectedFilters.includes(MediaType.Video)\"\n                  svgIcon=\"circle\"></mat-icon>\n      </span>\n    </mat-chip>\n  </mat-chip-list>\n  </div>\n  <ol class=\"mediaList\">\n    <li (click)=\"clickToSelect(clip)\"\n        *ngFor=\"let clip of clips$|async\"\n        [class.mediaList__option--selected]=\"checkedMap[clip.id]\"\n        class=\"mediaList__option\">\n      <figure *ngIf=\"clip.type === 0\">\n        <figcaption class=\"mediaList__name\">\n          <mat-icon class=\"mediaList__icon\" matListIcon svgIcon=\"insert_photo\"></mat-icon>\n          {{clip.name}}</figcaption>\n        <img [alt]=\"clip.name\" [src]=\"clip.path\" class=\"mediaList__img\"/>\n      </figure>\n\n      <span *ngIf=\"clip.type === 1\" class=\"mediaList__audioContainer\">\n        <span class=\"mediaList__name\">\n          <mat-icon class=\"mediaList__icon\" matListIcon svgIcon=\"audiotrack\"></mat-icon>\n          {{clip.name}}\n        </span>\n\n        <span class=\"audio-image\">\n          <mat-icon matListIcon svgIcon=\"speaker\"></mat-icon>\n        </span>\n      </span>\n\n      <span *ngIf=\"clip.type === 2\" class=\"mediaList__videoContainer\">\n          <span class=\"mediaList__name\">\n            <mat-icon class=\"mediaList__icon\" matListIcon svgIcon=\"videocam\"></mat-icon>\n            {{clip.name}}\n        </span>\n\n        <span class=\"video-image\">\n          <mat-icon matListIcon svgIcon=\"video_library\"></mat-icon>\n        </span>\n      </span>\n\n      <span *ngIf=\"clip.type === 3\" class=\"iframe-container\">\n        <span class=\"media-name\">\n          <mat-icon\n            class=\"media-icon\"\n            matListIcon\n            svgIcon=\"videocam\"\n          ></mat-icon>\n          {{ clip.name }}\n        </span>\n        <span class=\"media-iframe-container\">\n          <iframe [src]=\"clip.path | safeurl\"></iframe>\n        </span>\n      </span>\n    </li>\n  </ol>\n</div>\n"
        },
        {
            "name": "ClipTypeComponent",
            "id": "component-ClipTypeComponent-e0877507ae8a698ff74e24677cf281fd",
            "file": "src/app/shared/components/clip-type/clip-type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clip-type",
            "styleUrls": [
                "./clip-type.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./clip-type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'app-clip-type',\n  templateUrl: './clip-type.component.html',\n  styleUrls: ['./clip-type.component.css']\n})\nexport class ClipTypeComponent {\n\n  @Input()\n  public type: number;\n\n  constructor() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./clip-type.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<ng-container [ngSwitch]=\"type\">\n  <mat-icon *ngSwitchCase=\"0\" svgIcon=\"insert_photo\"></mat-icon>\n  <mat-icon *ngSwitchCase=\"1\" svgIcon=\"audiotrack\"></mat-icon>\n  <mat-icon *ngSwitchCase=\"2\" svgIcon=\"videocam\"></mat-icon>\n</ng-container>\n"
        },
        {
            "name": "ConfigMediaPathComponent",
            "id": "component-ConfigMediaPathComponent-1d576f4fa33bd2d628b12fc4168b2527",
            "file": "src/app/manage/media/media-overview/config-media-path/config-media-path.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-config-media-path",
            "styleUrls": [
                "./config-media-path.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./config-media-path.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "config$",
                    "defaultValue": "this.appQuery.config$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormBuilder().group({\n    path: '',\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormBuilder} from \"@angular/forms\";\nimport {MatDialogRef} from \"@angular/material/dialog\";\nimport {AppService} from \"../../../../state/app.service\";\nimport {AppQueries} from \"../../../../state/app.queries\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {SnackbarService} from \"../../../../core/services/snackbar.service\";\n\n@Component({\n  selector: 'app-config-media-path',\n  templateUrl: './config-media-path.component.html',\n  styleUrls: ['./config-media-path.component.css']\n})\nexport class ConfigMediaPathComponent implements OnInit, OnDestroy {\n\n\n  public form = new FormBuilder().group({\n    path: '',\n  });\n\n  public config$ = this.appQuery.config$;\n\n  private _destroy$ = new Subject();\n\n  constructor(private appQuery: AppQueries,\n              private dialogRef: MatDialogRef<any>,\n              private appService: AppService,\n              private snackBar: SnackbarService) {\n\n  }\n\n  ngOnInit(): void {\n    this.config$.pipe(\n      takeUntil(this._destroy$)\n    ).subscribe(value => {\n      this.form.reset({\n        path: value.mediaFolder\n      });\n    })\n  }\n\n  async save() {\n    if (!this.form.valid) {\n      // highlight hack\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    const {value} = this.form;\n\n    await this.appService.updateMediaFolder(value.path);\n\n    this.snackBar.normal(`Media-Folder Path changed 🎉`);\n\n    this.dialogRef.close();\n  }\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  width: 400px;\n}\n\nmat-form-field {\n  width: 100%;\n}\n",
                    "styleUrl": "./config-media-path.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appQuery",
                        "type": "AppQueries"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "appQuery",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title> Update Media-Folder Path </h2>\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"form\">\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Path</mat-label>\n        <input autocomplete=\"off\" formControlName=\"path\"\n               matInput required\n               type=\"text\"/>\n\n\n        <mat-error *ngIf=\"form.controls['path'].hasError('required')\">\n          You need to select a media folder.\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button (click)=\"save()\" cdkFocusInitial\n          color=\"primary\"\n          mat-raised-button> Update\n  </button>\n</mat-dialog-actions>\n\n"
        },
        {
            "name": "EventInfoComponent",
            "id": "component-EventInfoComponent-d5527b5c3af66cd66db23faa430607a8",
            "file": "src/app/manage/twitch/events-overview/event-info/event-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-info",
            "styleUrls": [
                "./event-info.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./event-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 16,
                    "type": "Twitch"
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "onEdit",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allInformations$",
                    "defaultValue": "this.appQueries.state$.pipe(\n    map(value => {\n      const clip = value.clips[this.item.clipId];\n      // const screen = value.screen[this.item.screenId];\n\n      return {\n        clip,\n        // screen\n      };\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "onActiveChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Twitch} from \"@memebox/contracts\";\nimport {AppQueries} from \"../../../../state/app.queries\";\nimport {map} from \"rxjs/operators\";\nimport {MatCheckboxChange} from \"@angular/material/checkbox\";\nimport {AppService} from \"../../../../state/app.service\";\n\n@Component({\n  selector: 'app-event-info',\n  templateUrl: './event-info.component.html',\n  styleUrls: ['./event-info.component.css']\n})\nexport class EventInfoComponent implements OnInit {\n\n  @Input()\n  item: Twitch;\n\n  allInformations$ = this.appQueries.state$.pipe(\n    map(value => {\n      const clip = value.clips[this.item.clipId];\n      // const screen = value.screen[this.item.screenId];\n\n      return {\n        clip,\n        // screen\n      };\n    })\n  )\n\n  @Output()\n  onDelete = new EventEmitter<any>();\n\n  @Output()\n  onEdit = new EventEmitter<any>();\n\n  constructor(private appQueries: AppQueries,\n              private appService: AppService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  onActiveChanged($event: MatCheckboxChange) {\n    const newItem = {\n      ...this.item,\n      active: $event.checked\n    }\n\n    this.appService.addOrUpdateTwitchEvent(newItem);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  background: #555;\n  border: 1px solid white;\n  border-radius: 1rem;\n  padding: 0.5rem;\n}\n",
                    "styleUrl": "./event-info.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<mat-checkbox [checked]=\"item.active\" (change)=\"onActiveChanged($event)\"></mat-checkbox>\n\n\n<b>{{item.name}}</b> - Event: <strong>{{ item.event }}</strong> -\n\n<ng-container *ngIf=\"allInformations$ | async as information\">\n\n  Clip: <strong>{{ information.clip?.name }}</strong>\n  <!-- Screen: <strong>{{ information.screen.name }}</strong> -->\n\n</ng-container>\n\n\n<button (click)=\"onDelete.emit()\" color=\"warn\" mat-icon-button>\n  <mat-icon svgIcon=\"delete\"></mat-icon>\n</button>\n\n\n<button (click)=\"onEdit.emit()\" color=\"accent\" mat-icon-button>\n  <mat-icon svgIcon=\"edit\"></mat-icon>\n</button>\n"
        },
        {
            "name": "EventsOverviewComponent",
            "id": "component-EventsOverviewComponent-02cdf5d48d43fbf7b47d20a335f92ce1",
            "file": "src/app/manage/twitch/events-overview/events-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-events-overview",
            "styleUrls": [
                "./events-overview.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./events-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventsList$",
                    "defaultValue": "this.queries.twitchEvent$",
                    "type": "Observable<Twitch[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteEvent",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEvent",
                    "args": [
                        {
                            "name": "twitchEventItem",
                            "type": "Twitch"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "twitchEventItem",
                            "type": "Twitch",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newEventConfigReceived",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Twitch"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Twitch",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Twitch} from \"@memebox/contracts\";\nimport {Observable} from \"rxjs\";\nimport {AppQueries} from \"../../../state/app.queries\";\nimport {AppService} from \"../../../state/app.service\";\nimport {DialogService} from \"../../../shared/components/dialogs/dialog.service\";\n\n@Component({\n  selector: 'app-events-overview',\n  templateUrl: './events-overview.component.html',\n  styleUrls: ['./events-overview.component.css']\n})\nexport class EventsOverviewComponent implements OnInit {\n\n  eventsList$: Observable<Twitch[]> = this.queries.twitchEvent$;\n\n  constructor(private queries: AppQueries,\n              private appService: AppService,\n              private dialogService: DialogService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  newEventConfigReceived($event: Twitch) {\n    this.appService.addOrUpdateTwitchEvent($event);\n  }\n\n  deleteEvent(id: string) {\n    this.appService.deleteTwitchEvent(id);\n  }\n\n  editEvent(twitchEventItem: Twitch) {\n    this.dialogService.showTwitchEditDialog( twitchEventItem);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-add-event {\n}\n\napp-event-info {\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n  margin-top: 1rem;\n}\n",
                    "styleUrl": "./events-overview.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "queries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "queries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-add-event (added)=\"newEventConfigReceived($event)\"></app-add-event>\n\n<app-event-info (onDelete)=\"deleteEvent(item.id)\"\n                (onEdit)=\"editEvent(item)\"\n                *ngFor=\"let item of eventsList$ | async\"\n                [item]=\"item\"\n>\n</app-event-info>\n"
        },
        {
            "name": "GettingStartedComponent",
            "id": "component-GettingStartedComponent-a1f87714b4c2d7dfb377639fb50db34a",
            "file": "src/app/shared/components/getting-started/getting-started.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-getting-started",
            "styleUrls": [
                "./getting-started.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./getting-started.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inOfflineMode$",
                    "defaultValue": "this.query.inOfflineMode$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "mediaList$",
                    "defaultValue": "this.query.clipList$",
                    "type": "Observable<Clip[]>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "screenList$",
                    "defaultValue": "this.query.screensList$",
                    "type": "Observable<Screen[]>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fillData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "newMediaClip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "newScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {Clip, Screen} from \"@memebox/contracts\";\nimport {AppQueries} from \"../../../state/app.queries\";\nimport {DialogService} from \"../dialogs/dialog.service\";\nimport {AppService} from \"../../../state/app.service\";\n\n@Component({\n  selector: 'app-getting-started',\n  templateUrl: './getting-started.component.html',\n  styleUrls: ['./getting-started.component.css']\n})\nexport class GettingStartedComponent implements OnInit {\n  public mediaList$: Observable<Clip[]> = this.query.clipList$;\n\n  public screenList$: Observable<Screen[]> = this.query.screensList$\n  public inOfflineMode$: Observable<boolean> = this.query.inOfflineMode$;\n\n\n  constructor(private query: AppQueries,\n              private appService: AppService,\n              private dialog: DialogService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  newMediaClip() {\n    this.dialog.showMediaEditDialog(null);\n  }\n\n  newScreen() {\n    this.dialog.showScreenEditDialog({});\n  }\n\n  fillData() {\n    this.appService.fillDummyData();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.strikethrough {\n  text-decoration: line-through;\n}\n\n.full-width {\n  width: 200px;\n}\n",
                    "styleUrl": "./getting-started.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "query",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "query",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card *ngIf=\"(mediaList$ |async).length === 0 || (screenList$ | async).length  === 0\">\n  <mat-card-title>\n    Getting started:\n  </mat-card-title>\n  <mat-card-content>\n    <mat-list>\n      <mat-list-item *ngIf=\"inOfflineMode$ | async\">\n        <button (click)=\"fillData()\" class=\"full-width\"\n                color=\"primary\"\n                mat-raised-button>\n          Offline Mode: Fill with dummy data\n        </button>\n      </mat-list-item>\n      <mat-list-item>\n        <div>\n          1. Choose media folder - show media choose component in situ\n        </div>\n      </mat-list-item>\n      <mat-list-item>\n        <ng-container *ngIf=\"(mediaList$ |async).length === 0; else mediaClipAdded\">\n          <button (click)=\"newMediaClip()\" class=\"full-width\"\n                  color=\"primary\"\n                  mat-raised-button>\n            2. Add media\n          </button>\n        </ng-container>\n        <ng-template #mediaClipAdded>\n          <span class=\"strikethrough\">\n             3. Add media\n          </span>\n        </ng-template>\n      </mat-list-item>\n      <mat-list-item>\n        <ng-container *ngIf=\"(screenList$ | async).length  === 0; else screenAdded\">\n          <button (click)=\"newScreen()\" class=\"full-width\"\n                  color=\"primary\"\n                  mat-raised-button>\n            3. Add a screen\n          </button>\n        </ng-container>\n        <ng-template #screenAdded>\n          <span class=\"strikethrough\">\n             3. Add a screen\n          </span>\n        </ng-template>\n\n      </mat-list-item>\n    </mat-list>\n\n  </mat-card-content>\n</mat-card>\n\n<div>Remove 'add media' block to right right of this when there is no media and we are in onboarding mode</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-db6ba0819d17289ee6582d4281ba562f",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "MainPageComponent",
            "id": "component-MainPageComponent-6dd1c84c13a15c449688e19930af70b6",
            "file": "src/app/manage/main-page/main-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-page",
            "styleUrls": [
                "./main-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {AppService} from \"../../state/app.service\";\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.scss']\n})\nexport class MainPageComponent implements OnInit {\n\n  constructor(private appService: AppService) {\n  }\n\n  ngOnInit(): void {\n    this.appService.loadState();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-navigation></app-navigation>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "MediaEditComponent",
            "id": "component-MediaEditComponent-c3f0f3f1f1a1d7780aac48a1286f8237",
            "file": "src/app/shared/components/dialogs/media-edit/media-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media-edit",
            "styleUrls": [
                "./media-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableMediaFiles",
                    "defaultValue": "combineLatest([\n    this.appQuery.currentMediaFile$.pipe(filter((files) => !!files)),\n    this.form.valueChanges.pipe(startWith(INITIAL_CLIP)),\n  ]).pipe(\n    map(([mediaFiles, currentFormValues]) => {\n      const currentFileType = currentFormValues.type;\n\n      return mediaFiles.filter((m) => m.fileType === currentFileType);\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "data",
                    "type": "Clip",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormBuilder().group({\n    id: \"\",\n    name: \"\",\n    type: 0,\n    volumeSetting: 0,\n    clipLength: 0,\n    playLength: 0,\n    path: \"\",\n    previewUrl: \"\",\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "FileInfo"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "FileInfo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateMediaType",
                    "args": [
                        {
                            "name": "value",
                            "type": "MediaType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "MediaType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport { Clip, FileInfo, MediaType } from \"@memebox/contracts\";\nimport { FormBuilder } from \"@angular/forms\";\nimport { AppService } from \"../../../../state/app.service\";\nimport { AppQueries } from \"../../../../state/app.queries\";\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pairwise,\n  startWith,\n  takeUntil,\n} from \"rxjs/operators\";\nimport { combineLatest, Subject } from \"rxjs\";\nimport { SnackbarService } from \"../../../../core/services/snackbar.service\";\n\n//TODO: clean up initial clip stuff - always populate\n// clipLength + playLength so the user doesn't want to die\nconst INITIAL_CLIP: Partial<Clip> = {\n  type: MediaType.Picture,\n  name: 'Media Filename',\n  volumeSetting: 10,\n  playLength: 600,\n  clipLength: 600, // TODO once its possible to get the data from the clip itself\n};\n\n@Component({\n  selector: \"app-media-edit\",\n  templateUrl: \"./media-edit.component.html\",\n  styleUrls: [\"./media-edit.component.scss\"],\n})\nexport class MediaEditComponent implements OnInit, OnDestroy {\n  public form = new FormBuilder().group({\n    id: \"\",\n    name: \"\",\n    type: 0,\n    volumeSetting: 0,\n    clipLength: 0,\n    playLength: 0,\n    path: \"\",\n    previewUrl: \"\",\n  });\n\n  availableMediaFiles = combineLatest([\n    this.appQuery.currentMediaFile$.pipe(filter((files) => !!files)),\n    this.form.valueChanges.pipe(startWith(INITIAL_CLIP)),\n  ]).pipe(\n    map(([mediaFiles, currentFormValues]) => {\n      const currentFileType = currentFormValues.type;\n\n      return mediaFiles.filter((m) => m.fileType === currentFileType);\n    })\n  );\n\n  private _destroy$ = new Subject();\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Clip,\n    private dialogRef: MatDialogRef<any>,\n    private appService: AppService,\n    private appQuery: AppQueries,\n    private snackBar: SnackbarService\n  ) {\n    this.data = this.data ?? (INITIAL_CLIP as any);\n  }\n\n  get MediaType() {\n    return MediaType;\n  }\n\n  ngOnInit(): void {\n    this.form.reset(this.data);\n    this.appService.listFiles();\n\n    this.form.valueChanges\n      .pipe(\n        map((value) => value.type),\n        distinctUntilChanged(),\n        pairwise(),\n        takeUntil(this._destroy$)\n      )\n      .subscribe((value) => {\n        console.info(value);\n        this.form.patchValue({\n          path: \"\",\n          previewUrl: \"\",\n        });\n      });\n  }\n\n  async save() {\n    if (!this.form.valid) {\n      // highlight hack\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    const { value } = this.form;\n\n    await this.appService.addOrUpdateClip(value);\n\n    this.snackBar.normal(\n      `Clip \"${value.name}\"  ${value.id ? \"updated\" : \"added\"} 🎉`\n    );\n\n    this.dialogRef.close();\n  }\n\n  onChange($event: FileInfo) {\n    console.info({ $event });\n\n    this.form.patchValue({\n      path: $event.apiUrl,\n    });\n  }\n\n  updateMediaType(value: MediaType): void {\n    this.form.patchValue({ type: value });\n  }\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  min-width: 400px;\n  max-width: 600px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n}\n\nimg {\n  align-self: center;\n  width: 100%;\n}\n\n.form-field-row {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  display: block;\n  width: 100%;\n}\n\n::ng-deep .mat-form-field {\n  display: block !important;\n}\n\n.slider__row {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  margin-bottom: 2rem;\n\n  mat-slider {\n    flex: 1;\n  }\n\n  .volume__label {\n    width: 3rem;\n    text-align: right;\n  }\n}\n\n.action-buttons {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-top: 1rem;\n  margin-bottom: 2rem;\n\n  button {\n    width: 30%;\n  }\n}\n",
                    "styleUrl": "./media-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Clip"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "appQuery",
                        "type": "AppQueries"
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Clip",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appQuery",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "MediaType": {
                    "name": "MediaType",
                    "getSignature": {
                        "name": "MediaType",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                }
            },
            "templateData": "<h2 mat-dialog-title>\n  {{ data?.id ? 'Update Media: \"' + form.value.name + '\"' : \"Add media\" }}\n</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <form [formGroup]=\"form\">\n    <mat-form-field>\n      <input autocomplete=\"off\"\n             formControlName=\"name\"\n             matInput\n             placeholder=\"Name\"\n             required\n             type=\"text\"/>\n\n      <mat-error *ngIf=\"form.controls['name'].hasError('required')\">\n        Name is required\n      </mat-error>\n    </mat-form-field>\n\n    <div class=\"action-buttons\">\n      <button (click)=\"updateMediaType(MediaType.Picture)\"\n              [color]=\"form.value.type === MediaType.Picture ? 'primary' : 'accent'\"\n              mat-raised-button\n      >\n        <mat-icon svgIcon=\"insert_photo\"></mat-icon>\n        Image\n      </button>\n      <button (click)=\"updateMediaType(MediaType.Audio)\"\n              [color]=\"form.value.type === MediaType.Audio ? 'primary' : 'accent'\"\n              mat-raised-button\n      >\n        <mat-icon svgIcon=\"audiotrack\"></mat-icon>\n        Audio\n      </button>\n      <button (click)=\"updateMediaType(MediaType.Video)\"\n              [color]=\"form.value.type === MediaType.Video ? 'primary' : 'accent'\"\n              mat-raised-button\n      >\n        <mat-icon svgIcon=\"videocam\"></mat-icon>\n        Video\n      </button>\n      <button (click)=\"updateMediaType(MediaType.IFrame)\"\n              [color]=\"form.value.type === MediaType.IFrame ? 'primary' : 'accent'\"\n              mat-raised-button\n      >\n        <mat-icon svgIcon=\"videocam\"></mat-icon>\n        IFrame\n      </button>\n    </div>\n\n    <mat-form-field *ngIf=\"false\">\n      <input autocomplete=\"off\"\n             formControlName=\"clipLength\"\n             matInput\n             placeholder=\"Media Length\"\n             type=\"number\"\n      />\n      <span matSuffix>ms</span>\n    </mat-form-field>\n\n    <div class=\"form-field-row\">\n      <mat-form-field>\n        <input autocomplete=\"off\"\n               formControlName=\"path\"\n               matInput\n               [placeholder]=\"form.value.type !== 3 ? 'File' : 'URL'\"\n               required\n               type=\"text\"\n        />\n        <div matSuffix *ngIf=\"form.value.type !== 3\">\n          <mat-select (valueChange)=\"onChange($event)\"\n                      *ngIf=\"availableMediaFiles | async as mediaFiles\"\n          >\n            <mat-option *ngFor=\"let file of mediaFiles\" [value]=\"file\">\n              {{ file.fileName }}\n            </mat-option>\n          </mat-select>\n        </div>\n\n        <mat-error *ngIf=\"form.controls['path'].hasError('required')\">\n          You need to enter the URL or select a file.\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div class=\"form-field-row\">\n      <mat-form-field>\n        <input [placeholder]=\"\n                 form.value.type === 0\n                   ? 'Visible screen time (ms)'\n                   : 'Play time on screen (ms)'\n               \"\n               [required]=\"form.value.type === 0\"\n               autocomplete=\"off\"\n               formControlName=\"playLength\"\n               matInput\n               type=\"number\"\n        />\n        <span matSuffix>ms</span>\n\n        <mat-error *ngIf=\"form.controls['playLength'].hasError('required')\">\n          How long should it be visible on screen?\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <ng-container *ngIf=\"form.value.type !== 0 && form.value.type !== 3\">\n      <mat-label>Volume</mat-label>\n      <div class=\"slider__row\">\n        <mat-slider #volumeSlider\n                    [max]=\"100\"\n                    [min]=\"0\"\n                    [step]=\"1\"\n                    formControlName=\"volumeSetting\"\n        >\n        </mat-slider>\n        <div class=\"volume__label\">\n          {{ volumeSlider.value }}\n        </div>\n      </div>\n    </ng-container>\n    <div class=\"form-field-row\">\n      <mat-form-field *ngIf=\"false\">\n        <input autocomplete=\"off\"\n               formControlName=\"previewUrl\"\n               matInput\n               placeholder=\"Preview URL\"\n               type=\"text\"\n        />\n      </mat-form-field>\n    </div>\n    <img *ngIf=\"form.value.type === 0\"\n         [src]=\"form.value.path || form.value.previewUrl\" />\n    <iframe *ngIf=\"form.value.type === 3\"\n            [src]=\"form.value.path | safeurl\"\n    ></iframe>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button (click)=\"save()\" cdkFocusInitial\n          color=\"accent\"\n          mat-raised-button>{{ data?.id ? 'Update' : 'Add' }}</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "MediaInfoComponent",
            "id": "component-MediaInfoComponent-b9d6a66d9437702f25643b856c8a0207",
            "file": "src/app/manage/media/media-overview/media-info/media-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media-info",
            "styleUrls": [
                "./media-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "info",
                    "line": 16,
                    "type": "Clip"
                }
            ],
            "outputsClass": [
                {
                    "name": "onAssignObs",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "onEdit",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "onEditScreenClipOptions",
                    "defaultValue": "new EventEmitter<Screen>()",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPreview",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "domSanitizer",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "screenList$",
                    "defaultValue": "this.appQueries.screensList$.pipe(\n    map(screenList => screenList.filter(screen => !!screen.clips[this.info.id]))\n  )",
                    "type": "Observable<Screen[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport {Clip, Screen} from \"@memebox/contracts\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {AppQueries} from \"../../../../state/app.queries\";\n\n@Component({\n  selector: 'app-media-info',\n  templateUrl: './media-info.component.html',\n  styleUrls: ['./media-info.component.scss']\n})\nexport class MediaInfoComponent implements OnInit {\n\n  @Input()\n  public info: Clip;\n  public screenList$: Observable<Screen[]> = this.appQueries.screensList$.pipe(\n    map(screenList => screenList.filter(screen => !!screen.clips[this.info.id]))\n  )\n  @Output()\n  public onPreview = new EventEmitter();\n\n  @Output()\n  public onEdit = new EventEmitter();\n\n  @Output()\n  public onDelete = new EventEmitter();\n\n  @Output()\n  public onAssignObs = new EventEmitter();\n\n  @Output()\n  public onEditScreenClipOptions = new EventEmitter<Screen>();\n\n  constructor(public domSanitizer: DomSanitizer,\n              private appQueries: AppQueries) {\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n  display: block;\n}\n\n.mediaInfo {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  height: 100%;\n}\n\n.mediaInfo__titleRow {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-content: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n}\n\n.mediaInfo__titleRow__name {\n  margin-bottom: 0;\n}\n\n.mediaInfo__actionButtons {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  button {\n    width: 45%;\n  }\n}\n\n.mediaInfo__preview {\n  margin-bottom: 2rem;\n  height: 10rem;\n}\n\n.mediaInfo__preview__img {\n  height: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n\n.mediaInfo__preview__audio, .mediaInfo__preview__video {\n  height: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n  text-align: center;\n\n  .mat-icon {\n    width: 8rem;\n    height: 8rem;\n  }\n}\n\n.mediaInfo__delete {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n\n.mediaInfo__screensList {\n  margin-top: 2rem;\n  margin-bottom: 6rem;\n  height: 8.5rem;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.mediaInfo__screensListTitle {\n  margin-bottom: 1rem;\n}\n\n.mediaInfo__screensListChip {\n  background-color: #2f3640 !important;\n  color: #ffffff !important;\n  pointer-events: none;\n}\n",
                    "styleUrl": "./media-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mediaInfo\">\n  <div class=\"mediaInfo__titleRow\">\n    <h2 class=\"mat-h2 mediaInfo__titleRow__name\">{{info.name}}</h2>\n    <app-clip-type [type]=\"info.type\"></app-clip-type>\n  </div>\n  <mat-card-content>\n    <div class=\"mediaInfo__preview\">\n        <img *ngIf=\"info.type === 0 && (info.previewUrl || info.path)\"\n             [src]=\"(info.previewUrl || info.path) | safeurl\"\n             [alt]=\"info.name\"\n             class=\"mediaInfo__preview__img\">\n\n      <div *ngIf=\"info.type === 1\" class=\"mediaInfo__preview__audio\">\n        <mat-icon matListIcon svgIcon=\"speaker\"></mat-icon>\n      </div>\n\n      <div *ngIf=\"info.type === 2\" class=\"mediaInfo__preview__video\">\n        <mat-icon matListIcon svgIcon=\"videocam\"></mat-icon>\n      </div>\n      <div *ngIf=\"info.type === 3 && (info.previewUrl || info.path)\">\n        <iframe [src]=\"info.path | safeurl\"></iframe>\n      </div>\n    </div>\n\n    <div class=\"mediaInfo__actionButtons\">\n      <button (click)=\"onEdit.emit()\" color=\"accent\" mat-flat-button>\n        <mat-icon svgIcon=\"edit\"></mat-icon>\n        Edit\n      </button>\n      <button (click)=\"onPreview.emit()\" color=\"primary\" mat-button>\n        <mat-icon svgIcon=\"preview\"></mat-icon>\n        Preview\n      </button>\n    </div>\n\n    <div class=\"mediaInfo__screensList\" *ngIf=\"screenList$ | async as screenList\">\n      <h4 class=\"mediaInfo__screensListTitle\">Appears in {{screenList.length}}\n        {{screenList.length === 1 ? 'Screen' : 'Screens'}}</h4>\n          <mat-chip-list>\n            <mat-chip class=\"mediaInfo__screensListChip\" *ngFor=\"let entry of screenList\">\n              {{entry.name}}\n            </mat-chip>\n          </mat-chip-list>\n    </div>\n  </mat-card-content>\n  <mat-card-actions>\n    <button (click)=\"onDelete.emit()\" class=\"mediaInfo__delete\" color=\"warn\" mat-flat-button>\n      <mat-icon svgIcon=\"delete\"></mat-icon>\n      Delete media\n    </button>\n  </mat-card-actions>\n</div>\n"
        },
        {
            "name": "MediaOverviewComponent",
            "id": "component-MediaOverviewComponent-43fd20f4a1590e95a02f754f22f93518",
            "file": "src/app/manage/media/media-overview/media-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media-overview",
            "styleUrls": [
                "./media-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mediaList$",
                    "defaultValue": "this.query.clipList$",
                    "type": "Observable<Clip[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "query",
                    "type": "AppQueries",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "screenList$",
                    "defaultValue": "this.query.screensList$",
                    "type": "Observable<Screen[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "service",
                    "type": "AppService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onAssignObs",
                    "args": [
                        {
                            "name": "item",
                            "type": "Clip"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClipOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "Clip"
                        },
                        {
                            "name": "screen",
                            "type": "Screen"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "screen",
                            "type": "Screen",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "clipId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "clipId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEdit",
                    "args": [
                        {
                            "name": "item",
                            "type": "Clip"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPreview",
                    "args": [
                        {
                            "name": "item",
                            "type": "Clip"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDialog",
                    "args": [
                        {
                            "name": "clipInfo",
                            "type": "Partial<Clip>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "clipInfo",
                            "type": "Partial<Clip>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {Clip, Screen} from \"@memebox/contracts\";\nimport {AppService} from \"../../../state/app.service\";\nimport {AppQueries} from \"../../../state/app.queries\";\nimport {ScreenAssigningDialogComponent} from \"./screen-assigning-dialog/screen-assigning-dialog/screen-assigning-dialog.component\";\nimport {WebsocketService} from \"../../../core/services/websocket.service\";\nimport {DialogService} from \"../../../shared/components/dialogs/dialog.service\";\n\n@Component({\n  selector: 'app-media-overview',\n  templateUrl: './media-overview.component.html',\n  styleUrls: ['./media-overview.component.scss']\n})\nexport class MediaOverviewComponent implements OnInit {\n\n  public mediaList$: Observable<Clip[]> = this.query.clipList$;\n  public screenList$: Observable<Screen[]> = this.query.screensList$\n\n  constructor(public service: AppService,\n              public query: AppQueries,\n              private _dialog: DialogService,\n              private _wsService: WebsocketService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  addNewItem(): any {\n    this.showDialog(null);\n  }\n\n\n  showDialog(clipInfo: Partial<Clip>): void {\n    this._dialog.showMediaEditDialog(clipInfo);\n  }\n\n  async onDelete(clipId: string) {\n    const result = await this._dialog.showConfirmationDialog({\n      title: 'Are you sure you want to delete this clip?',\n    });\n\n    if (result) {\n      await this.service.deleteClip(clipId);\n    }\n  }\n\n  onEdit(item: Clip): void {\n    this.showDialog(item);\n  }\n\n  onPreview(item: Clip): void {\n    this._wsService.triggerClipOnScreen(item.id);\n  }\n\n  onAssignObs(item: Clip): void {\n    this._dialog.open(\n      ScreenAssigningDialogComponent, {\n        data: item\n      }\n    )\n  }\n\n  //TODO - the name and other information should come from the state\n  onClipOptions(item: Clip, screen: Screen): void {\n    this._dialog.showScreenClipOptionsDialog({\n      clipId: item.id,\n      screenId: screen.id,\n      name: item.name\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~angular-material-css-vars/public-util';\n@import '../../../../utils/mixins';\n\n.mediaList {\n  @include gridLayout;\n}\n\n.mediaList__clip {\n  @include gridLayout__item;\n}\n\n.mediaList__clipCard {\n  height: 100%;\n}\n\n.mediaList__appMediaInfo {\n  height: 100%;\n}\n\n.mediaList__clipCard--addNew {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s ease-in-out;\n  cursor: pointer;\n\n  &:hover {\n    background-color: mat-css-color-accent() !important;\n  }\n}\n",
                    "styleUrl": "./media-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "AppService"
                    },
                    {
                        "name": "query",
                        "type": "AppQueries"
                    },
                    {
                        "name": "_dialog",
                        "type": "DialogService"
                    },
                    {
                        "name": "_wsService",
                        "type": "WebsocketService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "query",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_wsService",
                        "type": "WebsocketService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"mediaList$ | async as mediaList\"\n     class=\"mediaList\">\n\n  <div *ngFor=\"let item of mediaList\"\n       class=\"mediaList__clip\">\n    <mat-card class=\"mediaList__clipCard\">\n      <app-media-info (onAssignObs)=\"onAssignObs(item)\"\n                      (onDelete)=\"onDelete(item.id)\"\n                      (onEdit)=\"onEdit(item)\"\n                      (onEditScreenClipOptions)=\"onClipOptions(item, $event)\"\n                      (onPreview)=\"onPreview(item)\"\n                      [info]=\"item\"\n                      class=\"mediaList__appMediaInfo\"\n      >\n\n      </app-media-info>\n    </mat-card>\n  </div>\n  <ng-container *ngIf=\"mediaList.length === 0 || (screenList$ | async).length === 0 \">\n    <div [class.media-clip]=\"mediaList.length !== 0\">\n      <app-getting-started></app-getting-started>\n    </div>\n  </ng-container>\n\n\n  <div class=\"mediaList__clip\">\n    <mat-card (click)=\"addNewItem()\" class=\"mediaList__clipCard mediaList__clipCard--addNew\">\n      <mat-icon svgIcon=\"add\"></mat-icon>\n      Add new media\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"floating-action-button\">\n  <button (click)=\"addNewItem()\" aria-label=\"Add a new meme/media\"\n          color=\"warn\"\n          mat-fab\n  >\n    <mat-icon svgIcon=\"add\"></mat-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "MobileClipOverviewComponent",
            "id": "component-MobileClipOverviewComponent-b285e73e57dd7940b5fe5be7b1a3febc",
            "file": "src/app/mobile/mobile-clip-overview/mobile-clip-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mobile-clip-overview",
            "styleUrls": [
                "./mobile-clip-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mobile-clip-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clipList$",
                    "defaultValue": "this.appQueries.clipList$",
                    "type": "Observable<Clip[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "currentColumnSize",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onColumnSizeChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPreview",
                    "args": [
                        {
                            "name": "item",
                            "type": "Clip"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {AppQueries} from \"../../state/app.queries\";\nimport {AppService} from \"../../state/app.service\";\nimport {Observable, Subject} from \"rxjs\";\nimport {Clip} from \"@memebox/contracts\";\nimport {WebsocketService} from \"../../core/services/websocket.service\";\nimport {SettingsService} from \"../../core/services/settings.service\";\nimport {take, takeUntil} from \"rxjs/operators\";\n\nconst SettingMobileColumnSize = 'MOBILE_COLUMN_SIZE';\n\n@Component({\n  selector: 'app-mobile-clip-overview',\n  templateUrl: './mobile-clip-overview.component.html',\n  styleUrls: ['./mobile-clip-overview.component.scss']\n})\nexport class MobileClipOverviewComponent implements OnInit, OnDestroy {\n\n  public currentColumnSize = 50;\n  public clipList$: Observable<Clip[]> = this.appQueries.clipList$;\n\n  private _destroy$ = new Subject();\n\n  constructor(private appQueries: AppQueries,\n              private appService: AppService,\n              private _wsService: WebsocketService,\n              private _settingsService: SettingsService) {\n    const savedColumnSizeStringValue = this._settingsService.loadSetting(SettingMobileColumnSize, '50');\n\n    // refactor later...\n    this.currentColumnSize = +savedColumnSizeStringValue;\n  }\n\n  ngOnInit(): void {\n    this.appService.loadState();\n\n    this._wsService.onOpenConnection$.pipe(\n      take(1)\n    ).subscribe(value => {\n      this._wsService.sendI_Am_OBS('1');\n    })\n\n    this._wsService.onUpdateData$.pipe(\n      takeUntil(this._destroy$),\n    ).subscribe(value => {\n      this.appService.loadState();\n    });\n  }\n\n\n  onPreview(item: Clip) {\n    this._wsService.triggerClipOnScreen(item.id);\n  }\n\n  onColumnSizeChanged($event: number) {\n    this.currentColumnSize = $event;\n    this._settingsService.saveSetting(SettingMobileColumnSize, `${$event}`);\n  }\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n}\n\n$toolbarHeight: 64px;\n\n.page-content {\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  height: calc(100vh - #{$toolbarHeight});\n  max-height: calc(100vh - #{$toolbarHeight});\n  overflow-y: auto;\n}\n\n.item {\n  width: var(--item-width-percent, 50%);\n  padding: 1rem 1rem 0;\n\n  // fix 3 / 4 column mode\n  &:nth-of-type(2n+1) {\n    padding-right: 0.5rem;\n  }\n\n  &:nth-of-type(2n+2) {\n    padding-left: 0.5rem;\n  }\n\n  mat-card {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n  }\n}\n\nmat-toolbar {\n  mat-select {\n    width: 140px;\n  }\n}\n\n.toolbar-spacer {\n  flex: 1 1 auto;\n}\n\napp-clip-type {\n  display: inline;\n  padding-right: 0.5rem;\n}\n",
                    "styleUrl": "./mobile-clip-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "_wsService",
                        "type": "WebsocketService"
                    },
                    {
                        "name": "_settingsService",
                        "type": "SettingsService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_wsService",
                        "type": "WebsocketService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_settingsService",
                        "type": "SettingsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-toolbar>\n  <mat-toolbar-row>\n    <span>MemeBox</span>\n\n    <span class=\"toolbar-spacer\">\n  </span>\n\n    <mat-select (valueChange)=\"onColumnSizeChanged($event)\" [value]=\"currentColumnSize\"\n                placeholder=\"Columns\">\n      <mat-option [value]=\"50\">2 Columns</mat-option>\n      <mat-option [value]=\"33\">3 Columns</mat-option>\n      <mat-option [value]=\"25\">4 Columns</mat-option>\n    </mat-select>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<div [style.--item-width-percent.%]=\"currentColumnSize\" class=\"page-content\">\n  <span *ngFor=\"let clip of clipList$|async\" class=\"item\">\n\n    <mat-card (click)=\"onPreview(clip)\"\n              mat-ripple>\n\n    <app-clip-type [type]=\"clip.type\"></app-clip-type>\n      {{clip.name}}\n      </mat-card>\n  </span>\n</div>\n"
        },
        {
            "name": "MobileViewLinkComponent",
            "id": "component-MobileViewLinkComponent-7b9c2d746b51c2f046ca5a6736343322",
            "file": "src/app/manage/qrcode-dialog/mobile-view-link/mobile-view-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mobile-view-link",
            "styleUrls": [
                "./mobile-view-link.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./mobile-view-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "networkInterface$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "openInTab",
                    "args": [
                        {
                            "name": "mobileViewUrl",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "mobileViewUrl",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ENDPOINTS, NetworkInfo} from \"@memebox/contracts\";\nimport {EXPRESS_BASE} from \"../../../state/app.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {map} from \"rxjs/operators\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-mobile-view-link',\n  templateUrl: './mobile-view-link.component.html',\n  styleUrls: ['./mobile-view-link.component.css']\n})\nexport class MobileViewLinkComponent implements OnInit {\n\n  public networkInterface$: Observable<string>;\n\n  constructor(private http: HttpClient) {\n    this.networkInterface$ = this.http.get<NetworkInfo[]>(`${EXPRESS_BASE}/${ENDPOINTS.NETWORK_LIST}`).pipe(\n      map(value => {\n        const port = location.port;\n        let urlBase = `${value[0].address}:${port}`;\n\n        if (port === '4200') {\n          urlBase = location.host;\n        }\n\n        return `http:///${urlBase}#/mobile`;\n      })\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n  openInTab(mobileViewUrl: string) {\n    window.open(mobileViewUrl, '_blank');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  width: 100%;\n}\n\n.holder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\nbutton {\n  margin-bottom: 1rem;\n}\n",
                    "styleUrl": "./mobile-view-link.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"networkInterface$ | async as mobileViewUrl\"\n     class=\"holder\"\n>\n  <button (click)=\"openInTab(mobileViewUrl)\" color=\"accent\"\n          mat-raised-button>Mobile View:\n  </button>\n\n  <qr-code [size]=\"140\" [value]=\"mobileViewUrl\"></qr-code>\n</div>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-58f01c968e2a29b2ee4cc8f414643391",
            "file": "src/app/manage/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "links",
                    "defaultValue": "[\n    {path: './media', displayName: 'Media'},\n    {path: './screens', displayName: 'Screens'},\n    {path: './twitch', displayName: 'Twitch'}\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "openMobileViewDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {DialogService} from \"../../shared/components/dialogs/dialog.service\";\nimport {QrcodeDialogComponent} from \"../qrcode-dialog/qrcode-dialog.component\";\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent implements OnInit {\n  links = [\n    {path: './media', displayName: 'Media'},\n    {path: './screens', displayName: 'Screens'},\n    {path: './twitch', displayName: 'Twitch'}\n  ]\n\n  constructor(private dialogService: DialogService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  openMobileViewDialog() {\n    console.info('open qr');\n    this.dialogService.open(QrcodeDialogComponent, {\n\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~angular-material-css-vars/public-util';\n\n:host {\n  display: block;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  // no mat-css-scss function?\n  background: rgb(var(--palette-background-background));\n\n  ::ng-deep {\n    .mat-tab-links {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n    }\n\n    .mat-tab-links-active {\n      border-bottom: 0.5rem solid #00d8d6;\n      opacity: 1 !important;\n    }\n  }\n}\n\n.navigation {\n  display: flex;\n  flex-direction: row;\n\n  &__mainLinks {\n    flex: 1;\n  }\n\n  &__iconLinks {\n    width: 120px;\n\n    display: flex;\n    align-items: center;\n  }\n}\n\n\n\n.github-corner:hover .octo-arm {\n  animation: octocat-wave 560ms ease-in-out\n}\n\n@keyframes octocat-wave {\n  0%, 100% {\n    transform: rotate(0)\n  }\n  20%, 60% {\n    transform: rotate(-25deg)\n  }\n  40%, 80% {\n    transform: rotate(10deg)\n  }\n}\n\n@media (max-width: 500px) {\n  .github-corner:hover .octo-arm {\n    animation: none\n  }\n  .github-corner .octo-arm {\n    animation: octocat-wave 560ms ease-in-out\n  }\n}\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"navigation\">\n\n  <nav class=\"mat-tab-links navigation__mainLinks \" mat-tab-nav-bar>\n    <a *ngFor=\"let link of links\" [routerLink]=\"link.path\"\n       mat-tab-link routerLinkActive=\"mat-tab-links-active\"\n    >{{link.displayName}}</a>\n  </nav>\n\n  <div class=\"navigation__iconLinks\">\n    <span>\n      <button mat-icon-button (click)=\"openMobileViewDialog()\">\n        <mat-icon svgIcon=\"qr_code_scanner\"></mat-icon>\n      </button>\n    </span>\n    <span>\n       <button mat-icon-button routerLink=\"./settings\" routerLinkActive=\"mat-primary\">\n        <mat-icon svgIcon=\"settings\"></mat-icon>\n      </button>\n    </span>\n    <span>\n      <a aria-label=\"View source on GitHub\" class=\"github-corner\"\n         href=\"https://github.com/negue/meme-box\"\n        target=\"_blank\"\n      >\n        <svg aria-hidden=\"true\" height=\"64\" width=\"64\"\n             style=\"fill:#151513; color:#fff; position: absolute; top:0; border: 0; right: 0;\"\n             viewBox=\"0 0 250 250\" >\n          <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path><path class=\"octo-arm\" d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\"></path>\n          <path class=\"octo-body\" d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\"></path>\n        </svg>\n  </a>\n      <style></style>\n    </span>\n  </div>\n</div>\n\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7f058b2089f9665928ac6205e57d4ebb",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-7eeb1de7a02184eded695cabd778dcd6",
            "file": "src/app/shared/components/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-not-found",
            "styleUrls": [
                "./page-not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss']\n})\nexport class PageNotFoundComponent implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-not-found.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  page-not-found works!\n</p>\n"
        },
        {
            "name": "QrcodeDialogComponent",
            "id": "component-QrcodeDialogComponent-a8d9cf7bba59ed0b8758184a476e8c93",
            "file": "src/app/manage/qrcode-dialog/qrcode-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-qrcode-dialog",
            "styleUrls": [
                "./qrcode-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./qrcode-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-qrcode-dialog',\n  templateUrl: './qrcode-dialog.component.html',\n  styleUrls: ['./qrcode-dialog.component.scss']\n})\nexport class QrcodeDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./qrcode-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Open on your Phone</h1>\n\n<div mat-dialog-content>\n  <app-mobile-view-link></app-mobile-view-link>\n</div>\n"
        },
        {
            "name": "ScreenAssigningDialogComponent",
            "id": "component-ScreenAssigningDialogComponent-cc8c024e457e89ad985b41b995f05a30",
            "file": "src/app/manage/media/media-overview/screen-assigning-dialog/screen-assigning-dialog/screen-assigning-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clip-assigning-dialog",
            "styleUrls": [
                "./screen-assigning-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-assigning-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkedMap",
                    "type": "Dictionary<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "type": "Clip",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "screenList",
                    "defaultValue": "this.appQueries.screensList$",
                    "type": "Observable<Screen[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "trackByScreen",
                    "defaultValue": "() => {...}",
                    "type": "TrackByFunction<Screen>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onSelectionChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatSelectionListChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatSelectionListChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnDestroy, OnInit, TrackByFunction} from '@angular/core';\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\nimport {Clip, Dictionary, Screen} from \"@memebox/contracts\";\nimport {Observable, Subject} from \"rxjs\";\nimport {MatSelectionListChange} from \"@angular/material/list\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {AppQueries} from \"../../../../../state/app.queries\";\nimport {AppService} from \"../../../../../state/app.service\";\n\n@Component({\n  selector: 'app-clip-assigning-dialog',\n  templateUrl: './screen-assigning-dialog.component.html',\n  styleUrls: ['./screen-assigning-dialog.component.css']\n})\nexport class ScreenAssigningDialogComponent implements OnInit, OnDestroy {\n\n  checkedMap: Dictionary<boolean>;\n  screenList: Observable<Screen[]> = this.appQueries.screensList$;\n  private destroy$ = new Subject();\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Clip,\n              private appQueries: AppQueries,\n              private appService: AppService) {\n  }\n\n  trackByScreen: TrackByFunction<Screen> = (index, item) => {\n    return item.id;\n  }\n\n  ngOnInit(): void {\n    this.screenList.pipe(\n      takeUntil(this.destroy$),\n    ).subscribe(allUrls => {\n      this.checkedMap = {};\n\n      allUrls.forEach(url => {\n        if (url.clips[this.data.id]) {\n          this.checkedMap[url.id] = true;\n        }\n      });\n    })\n  }\n\n  onSelectionChanged($event: MatSelectionListChange) {\n    const {value, selected} = $event.option;\n\n    if (selected) {\n      this.appService.addOrUpdateScreenClip(value, {\n        id: this.data.id,\n      });\n    } else {\n      this.appService.deleteScreenClip(value, this.data.id);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./screen-assigning-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Clip"
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Clip",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1 mat-dialog-title>Assign your Clip\"{{data.name}}\" to Screens: </h1>\n<div mat-dialog-content>\n\n  <mat-selection-list (selectionChange)=\"onSelectionChanged($event)\">\n    <mat-list-option *ngFor=\"let screen of screenList|async; trackBy: trackByScreen\"\n                     [selected]=\"checkedMap[screen.id]\"\n                     [value]=\"screen.id\">\n      {{screen.name}}\n    </mat-list-option>\n  </mat-selection-list>\n\n</div>\n"
        },
        {
            "name": "ScreenClipOptionsComponent",
            "id": "component-ScreenClipOptionsComponent-ccc310a32feb40a8f49e5d2ba48733f7",
            "file": "src/app/shared/components/dialogs/screen-clip-options/screen-clip-options.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screen-clip-options",
            "styleUrls": [
                "./screen-clip-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-clip-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_clipInfo",
                    "defaultValue": "null",
                    "type": "ScreenClip",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clipInfo$",
                    "defaultValue": "this.appQueries.screenMap$.pipe(\n    map(screenMap => screenMap[this.data.screenId].clips[this.data.clipId])\n  )",
                    "type": "Observable<ScreenClip>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "ScreenClipOptionsPayload",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormBuilder().group({\n    id: '',\n    width: '',\n    height: '',\n\n    position: PositionEnum.FullScreen,\n    left: '',\n    right: '',\n    bottom: '',\n    top: '',\n    imgFit: '', // todo image fit setting as enum\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {AppQueries} from \"../../../../state/app.queries\";\nimport {Observable, Subject} from \"rxjs\";\nimport {PositionEnum, ScreenClip} from \"@memebox/contracts\";\nimport {map, takeUntil} from \"rxjs/operators\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {FormBuilder} from \"@angular/forms\";\nimport {AppService} from \"../../../../state/app.service\";\nimport {SnackbarService} from \"../../../../core/services/snackbar.service\";\n\nexport interface ScreenClipOptionsPayload {\n  screenId: string;\n  clipId: string;\n  name: string;\n}\n\n@Component({\n  selector: 'app-screen-clip-options',\n  templateUrl: './screen-clip-options.component.html',\n  styleUrls: ['./screen-clip-options.component.scss']\n})\nexport class ScreenClipOptionsComponent implements OnInit {\n\n  public form = new FormBuilder().group({\n    id: '',\n    width: '',\n    height: '',\n\n    position: PositionEnum.FullScreen,\n    left: '',\n    right: '',\n    bottom: '',\n    top: '',\n    imgFit: '', // todo image fit setting as enum\n  })\n\n  public clipInfo$: Observable<ScreenClip> = this.appQueries.screenMap$.pipe(\n    map(screenMap => screenMap[this.data.screenId].clips[this.data.clipId])\n  );\n  private _clipInfo: ScreenClip = null;\n  private destroy$ = new Subject();\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ScreenClipOptionsPayload,\n              private dialogRef: MatDialogRef<any>,\n              private appQueries: AppQueries,\n              private appService: AppService,\n              private snackBar: SnackbarService) {\n  }\n\n  ngOnInit(): void {\n    this.clipInfo$.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(value => {\n      this._clipInfo = {\n        position: PositionEnum.FullScreen,\n        ...value\n      };\n\n      this.form.reset(this._clipInfo);\n    })\n  }\n\n  async save() {\n    if (!this.form.valid) {\n      // highlight hack\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    const {value} = this.form;\n\n    const newScreenClipValue: ScreenClip = {\n      ...this._clipInfo,\n      ...value\n    };\n\n    await this.appService.addOrUpdateScreenClip(this.data.screenId, newScreenClipValue);\n\n    // todo refactor \"better way?\" to trigger those snackbars\n    this.snackBar.normal(`Screen / Clip Assignment updated 🎉`);\n\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  max-width: 600px;\n  min-width: 320px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n}\n\n.title {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.title__icon {\n  margin-right: 0.5rem;\n}\n",
                    "styleUrl": "./screen-clip-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ScreenClipOptionsPayload"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>"
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ScreenClipOptionsPayload",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title class=\"title\">\n  <mat-icon svgIcon=\"code\" class=\"title__icon\"></mat-icon>\n  Custom CSS for {{data.name}} FOR THIS SCREEN\n</h2>\n<mat-dialog-content *ngIf=\"clipInfo$ | async as clipInfo\" class=\"mat-typography\">\n\n  <form [formGroup]=\"form\">\n    <mat-form-field>\n      <input autocomplete=\"off\" formControlName=\"width\"\n             matInput\n             placeholder=\"Width (px, %, rem, em)\"\n             type=\"text\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <input autocomplete=\"off\" formControlName=\"height\"\n             matInput\n             placeholder=\"Height (px, %, rem, em)\"\n             type=\"text\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-select formControlName=\"imgFit\"\n                  placeholder=\"Image-Fit\"\n                  value=\"contain\">\n        <mat-option value=\"contain\">Contain</mat-option>\n        <mat-option value=\"fill\">Fill</mat-option>\n        <mat-option value=\"cover\">Cover</mat-option>\n        <mat-option value=\"scale-down\">Scale down</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-select #positionSelection\n                  [value]=\"clipInfo?.position || 0\"\n                  formControlName=\"position\"\n                  placeholder=\"Position\">\n        <mat-option [value]=\"0\">Full screen</mat-option>\n        <mat-option [value]=\"1\">Manual position</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <ng-container *ngIf=\"positionSelection.value === 1\">\n      <mat-form-field>\n        <input autocomplete=\"off\" formControlName=\"left\"\n               matInput\n               placeholder=\"Left\"\n               type=\"text\">\n      </mat-form-field>\n\n\n      <mat-form-field>\n        <input autocomplete=\"off\" formControlName=\"right\"\n               matInput\n               placeholder=\"Right\"\n               type=\"text\">\n      </mat-form-field>\n\n      <mat-form-field>\n        <input autocomplete=\"off\" formControlName=\"top\"\n               matInput\n               placeholder=\"Top\"\n               type=\"text\">\n      </mat-form-field>\n\n\n      <mat-form-field>\n        <input autocomplete=\"off\" formControlName=\"bottom\"\n               matInput\n               placeholder=\"Bottom\"\n               type=\"text\">\n      </mat-form-field>\n    </ng-container>\n  </form>\n\n</mat-dialog-content>\n\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button (click)=\"save()\" cdkFocusInitial\n          color=\"primary\"\n          mat-raised-button>Upate\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "ScreenEditComponent",
            "id": "component-ScreenEditComponent-2ec5ffb9ab9cecde3f0a183f2de251af",
            "file": "src/app/shared/components/dialogs/screen-edit/screen-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-obs-edit",
            "styleUrls": [
                "./screen-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "Screen",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormBuilder().group({\n    name: '',\n    id: ''\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {Screen} from \"@memebox/contracts\";\nimport {FormBuilder} from \"@angular/forms\";\nimport {AppService} from \"../../../../state/app.service\";\nimport {SnackbarService} from \"../../../../core/services/snackbar.service\";\n\n@Component({\n  selector: 'app-obs-edit',\n  templateUrl: './screen-edit.component.html',\n  styleUrls: ['./screen-edit.component.css']\n})\nexport class ScreenEditComponent implements OnInit {\n\n  public form = new FormBuilder().group({\n    name: '',\n    id: ''\n  })\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Screen,\n              private dialogRef: MatDialogRef<any>,\n              private appService: AppService,\n              private snackBar: SnackbarService) {\n    this.form.patchValue({\n      name: data.name,\n      id: data.id\n    })\n  }\n\n  ngOnInit(): void {\n    this.form.reset(this.data);\n  }\n\n  async save() {\n    if (!this.form.valid) {\n      // highlight hack\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    const {value} = this.form;\n\n    const newScreenValue = {\n      ...this.data,\n      ...value\n    };\n\n    await this.appService.addOrUpdateScreen(newScreenValue);\n\n    // todo refactor \"better way?\" to trigger those snackbars\n    this.snackBar.normal(`Screen \"${newScreenValue.name}\" ${newScreenValue.id ? 'updated' : 'added'} 🎉`);\n\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n\n}\n\n.button-area {\n  display: flex;\n  justify-content: space-evenly;\n}\n",
                    "styleUrl": "./screen-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Screen"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Screen",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title> {{ data.id ? 'Update ' : 'Add ' }} a Screen </h2>\n<mat-dialog-content class=\"mat-typography\">\n\n  <form [formGroup]=\"form\">\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Name</mat-label>\n        <input autocomplete=\"off\"\n               formControlName=\"name\"\n               matInput required>\n\n        <mat-error *ngIf=\"form.controls['name'].hasError('required')\">\n          Name is required\n        </mat-error>\n      </mat-form-field>\n\n\n    </div>\n  </form>\n</mat-dialog-content>\n\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button (click)=\"save()\" cdkFocusInitial\n          color=\"primary\"\n          mat-raised-button>{{ data.id ? 'Update' : 'Add' }}</button>\n</mat-dialog-actions>\n\n"
        },
        {
            "name": "ScreenInfoComponent",
            "id": "component-ScreenInfoComponent-90f22a7f849c7f8dad67d51ae1cd40ad",
            "file": "src/app/manage/screen/screen-overview/screen-info/screen-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screen-info",
            "styleUrls": [
                "./screen-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "info",
                    "line": 18,
                    "type": "ScreenViewEntry"
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "onEdit",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "onEditAssignments",
                    "defaultValue": "new EventEmitter()",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "onEditScreenClipOptions",
                    "defaultValue": "new EventEmitter<Clip>()",
                    "line": 36,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPreview",
                    "defaultValue": "new EventEmitter()",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "clipList$",
                    "defaultValue": "this.appQueries.clipList$.pipe(\n    map(clipList => clipList.filter(clip => !!this.info.clips[clip.id]))\n  )",
                    "type": "Observable<Clip[]>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copyURL",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Clip, ScreenViewEntry} from \"@memebox/contracts\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {AppQueries} from \"../../../../state/app.queries\";\nimport {Clipboard} from \"@angular/cdk/clipboard\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\n\n\n@Component({\n  selector: 'app-screen-info',\n  templateUrl: './screen-info.component.html',\n  styleUrls: ['./screen-info.component.scss']\n})\nexport class ScreenInfoComponent implements OnInit {\n\n  @Input()\n  public info: ScreenViewEntry;\n  public clipList$: Observable<Clip[]> = this.appQueries.clipList$.pipe(\n    map(clipList => clipList.filter(clip => !!this.info.clips[clip.id]))\n  )\n  @Output()\n  public onEdit = new EventEmitter();\n\n  // TODO\n  @Output()\n  public onPreview = new EventEmitter()\n\n  @Output()\n  public onDelete = new EventEmitter();\n\n  @Output()\n  public onEditAssignments = new EventEmitter();\n\n  @Output()\n  public onEditScreenClipOptions = new EventEmitter<Clip>();\n\n  constructor(private appQueries: AppQueries,\n              private clipboard: Clipboard,\n              private _snackBar: MatSnackBar) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  copyURL(): void {\n    if (this.clipboard.copy(this.info.url)) {\n      this._snackBar.open('URL copied to clipboard', null, {\n        duration: 5000,\n        verticalPosition: 'top'\n\n      });\n    } else {\n      this._snackBar.open('URL couldn\\'t be copied to clipboard', null, {\n        duration: 10000,\n        verticalPosition: 'top',\n        panelClass: ['mat-toolbar', 'mat-warn']\n      });\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n  display: block;\n}\n\n.infoHolder {\n  display: flex;\n  flex-direction: column;\n}\n\n.titleRow {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-content: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n}\n\n.titleName {\n  margin-bottom: 0;\n}\n\n.formFieldRow {\n  margin-bottom: 2rem;\n  width: 100%;\n  display: block;\n\n  ::ng-deep .mat-form-field {\n    display: block;\n  }\n}\n\n.inputLabel--hidden {\n  display: none;\n}\n\n.actionButtons {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n\n  button {\n    width: 45%;\n  }\n\n  .actionButtons--single {\n    width: 100%;\n  }\n}\n\n.matTable {\n  width: 100%;\n}\n\n.deleteScreenButton {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n\n.mediaList {\n  max-height: 11.2rem;\n  overflow-y: scroll;\n  margin-bottom: 2rem;\n}\n\n.mediaList__settingsCell {\n  text-align: right;\n}\n\n.mediaList__settingsCellButton {\n  width: 3rem;\n  height: 3rem;\n}\n",
                    "styleUrl": "./screen-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "appQueries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"infoHolder\">\n  <div class=\"titleRow\">\n    <h2 class=\"mat-h2 titleName\">{{info.name}}</h2>\n    <mat-icon svgIcon=\"screen\"></mat-icon>\n  </div>\n\n  <div class=\"formFieldRow\">\n    <mat-form-field class=\"matFormField\">\n      <label class=\"inputLabel--hidden\" for=\"input-url\">Screen URL</label>\n      <input [value]=\"info.url\" matInput class=\"inputUrl\" id=\"input-url\" readonly type=\"text\"/>\n      <button mat-button\n              matSuffix\n              (click)=\"copyURL()\"\n              [attr.aria-label]=\"'Copy URL'\"\n              class=\"copyUrlButton\">\n        <mat-icon svgIcon=\"content_copy\"></mat-icon>\n        Copy URL\n      </button>\n    </mat-form-field>\n  </div>\n\n  <div class=\"actionButtons\">\n    <button (click)=\"onEdit.emit()\" color=\"accent\" mat-flat-button>\n      <mat-icon svgIcon=\"edit\"></mat-icon>\n      Edit Name\n    </button>\n    <button (click)=\"onPreview.emit()\" color=\"primary\" mat-button>\n      <mat-icon svgIcon=\"preview\"></mat-icon>\n      Preview\n    </button>\n  </div>\n\n  <ng-container *ngIf=\"clipList$ | async as clipList\">\n\n    <div class=\"actionButtons\">\n      <button (click)=\"onEditAssignments.next()\"\n              class=\"actionButtons--single\"\n              color=\"accent\"\n              mat-flat-button>\n        <mat-icon svgIcon=\"playlist_add\"></mat-icon>\n        {{ clipList.length === 0 ? 'Assign Media' : 'Edit Media' }}\n      </button>\n    </div>\n\n    <div class=\"mediaList\">\n      <table class=\"matTable\">\n        <tr *ngFor=\"let entry of clipList;\">\n          <td>\n            <app-clip-type [type]=\"entry.type\"></app-clip-type>\n          </td>\n          <td>{{entry.name}}</td>\n          <td class=\"mediaList__settingsCell\">\n            <button (click)=\"onEditScreenClipOptions.emit(entry)\"\n                    class=\"mediaList__settingsCellButton\"\n                    mat-icon-button>\n              <mat-icon svgIcon=\"preview\"></mat-icon>\n            </button>\n          </td>\n          <td class=\"mediaList__settingsCell\">\n            <button (click)=\"onEditScreenClipOptions.emit(entry)\"\n                    class=\"mediaList__settingsCellButton\"\n                    mat-icon-button>\n              <mat-icon svgIcon=\"settings\"></mat-icon>\n            </button>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </ng-container>\n  <mat-card-actions>\n    <button (click)=\"onDelete.emit()\" class=\"deleteScreenButton\" color=\"warn\" mat-flat-button>\n      <mat-icon svgIcon=\"delete\"></mat-icon>\n      Delete Screen\n    </button>\n  </mat-card-actions>\n</div>\n\n"
        },
        {
            "name": "ScreenOverviewComponent",
            "id": "component-ScreenOverviewComponent-4711cc9ee22c73bf22671c13eb15afa5",
            "file": "src/app/manage/screen/screen-overview/screen-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screen-overview",
            "styleUrls": [
                "./screen-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "screenList",
                    "defaultValue": "this._queries.screensList$.pipe(\n    map(stateUrlArray => stateUrlArray.map(screen => ({\n      ...screen,\n      url: `${createLocalOrProductionUrlBase()}/#/screen/${screen.id}`\n    })))\n  )",
                    "type": "Observable<ScreenViewEntry[]>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "service",
                    "type": "AppService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "obsInfo",
                            "type": "ScreenViewEntry"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "obsInfo",
                            "type": "ScreenViewEntry",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAssigned",
                    "args": [
                        {
                            "name": "obsInfo",
                            "type": "ScreenViewEntry"
                        },
                        {
                            "name": "clipId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "obsInfo",
                            "type": "ScreenViewEntry",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clipId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onClipOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "Clip"
                        },
                        {
                            "name": "screen",
                            "type": "Screen"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "screen",
                            "type": "Screen",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showAssignmentDialog",
                    "args": [
                        {
                            "name": "screen",
                            "type": "Partial<Screen>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "screen",
                            "type": "Partial<Screen>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDialog",
                    "args": [
                        {
                            "name": "screen",
                            "type": "Partial<Screen>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "screen",
                            "type": "Partial<Screen>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Clip, Screen, ScreenViewEntry} from \"@memebox/contracts\";\nimport {Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {ClipAssigningDialogComponent} from \"./clip-assigning-dialog/clip-assigning-dialog/clip-assigning-dialog.component\";\nimport {AppService, EXPRESS_BASE} from \"../../../state/app.service\";\nimport {AppQueries} from \"../../../state/app.queries\";\nimport {DialogService} from \"../../../shared/components/dialogs/dialog.service\";\n\nfunction createLocalOrProductionUrlBase() {\n  const port = location.port;\n  let urlBase = EXPRESS_BASE;\n\n  if (port === '4200') {\n    urlBase = location.host;\n  }\n\n  return urlBase;\n}\n\n\n@Component({\n  selector: 'app-screen-overview',\n  templateUrl: './screen-overview.component.html',\n  styleUrls: ['./screen-overview.component.scss']\n})\nexport class ScreenOverviewComponent implements OnInit {\n\n  public screenList: Observable<ScreenViewEntry[]> = this._queries.screensList$.pipe(\n    map(stateUrlArray => stateUrlArray.map(screen => ({\n      ...screen,\n      url: `${createLocalOrProductionUrlBase()}/#/screen/${screen.id}`\n    })))\n  )\n\n  constructor(\n    private _dialog: DialogService,\n    private _queries: AppQueries,\n    public service: AppService,\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  showDialog(screen: Partial<Screen>) {\n    this._dialog.showScreenEditDialog(screen)\n  }\n\n  addNewItem() {\n    this.showDialog({});\n  }\n\n  async delete(obsInfo: ScreenViewEntry) {\n    const confirmationResult = await this._dialog.showConfirmationDialog(\n      {\n        title: 'Are you sure you want to delete this screen?'\n      }\n    )\n\n    if (confirmationResult) {\n      this.service.deleteScreen(obsInfo.id);\n    }\n  }\n\n  showAssignmentDialog(screen: Partial<Screen>) {\n    this._dialog.open(\n      ClipAssigningDialogComponent, {\n        data: screen.id,\n        height: '600px',\n        width: '800px',\n      }\n    )\n  }\n\n  deleteAssigned(obsInfo: ScreenViewEntry, clipId: string) {\n    this.service.deleteScreenClip(obsInfo.id, clipId);\n  }\n\n  onClipOptions(item: Clip, screen: Screen) {\n    this._dialog.showScreenClipOptionsDialog({\n      clipId: item.id,\n      screenId: screen.id,\n      name: item.name\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~angular-material-css-vars/public-util';\n@import '../../../../utils/mixins';\n\n.screensList {\n  @include gridLayout;\n}\n\n.screensList__item {\n @include gridLayout__item;\n}\n\n.screensList__item__card {\n  height: 100%;\n}\n\n.add-new {\n  cursor: pointer;\n}\n\n.screensList__item--addNew {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s ease-in-out;\n  cursor: pointer;\n\n  &:hover {\n    background-color: mat-css-color-accent() !important;\n  }\n}\n",
                    "styleUrl": "./screen-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_dialog",
                        "type": "DialogService"
                    },
                    {
                        "name": "_queries",
                        "type": "AppQueries"
                    },
                    {
                        "name": "service",
                        "type": "AppService"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_queries",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"screenList | async as screenList\"\n     class=\"screensList\">\n  <div *ngFor=\"let screen of screenList\"\n       class=\"screensList__item\">\n    <mat-card class=\"screensList__item__card\">\n      <app-screen-info (onDelete)=\"delete(screen)\"\n                       (onEdit)=\"showDialog(screen)\"\n                       (onEditAssignments)=\"showAssignmentDialog(screen)\"\n                       (onEditScreenClipOptions)=\"onClipOptions($event, screen)\"\n                       [info]=\"screen\"\n      >\n\n      </app-screen-info>\n    </mat-card>\n  </div>\n\n  <div *ngIf=\"screenList.length === 0\" class=\"obs-item\">\n    <app-getting-started></app-getting-started>\n  </div>\n\n  <div class=\"screensList__item\">\n    <mat-card (click)=\"addNewItem()\" class=\"screensList__item--addNew\">\n      <mat-icon svgIcon=\"add\"></mat-icon>\n      Add new screen\n    </mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "SettingsOverviewComponent",
            "id": "component-SettingsOverviewComponent-b3b58f41a5ca8821c0a51f9649393013",
            "file": "src/app/manage/settings/settings-overview/settings-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-overview",
            "styleUrls": [
                "./settings-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config$",
                    "defaultValue": "this.query.config$",
                    "type": "Observable<Partial<Config>>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "query",
                    "type": "AppQueries",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "service",
                    "type": "AppService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "openMediaFolderDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "openMediaFolderExplorer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ConfigMediaPathComponent} from \"../../media/media-overview/config-media-path/config-media-path.component\";\nimport {Observable} from \"rxjs\";\nimport {Config} from \"@memebox/contracts\";\nimport {AppService} from \"../../../state/app.service\";\nimport {DialogService} from \"../../../shared/components/dialogs/dialog.service\";\nimport {AppQueries} from \"../../../state/app.queries\";\n\n@Component({\n  selector: 'app-settings-overview',\n  templateUrl: './settings-overview.component.html',\n  styleUrls: ['./settings-overview.component.scss']\n})\nexport class SettingsOverviewComponent implements OnInit {\n  public config$: Observable<Partial<Config>> = this.query.config$;\n\n  constructor(public service: AppService,\n              public query: AppQueries,\n              private _dialog: DialogService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  openMediaFolderDialog(): void {\n    this._dialog.open(ConfigMediaPathComponent, {\n      data: {}\n    });\n  }\n\n  openMediaFolderExplorer(): void {\n    this.service.openMediaFolder();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../utils/mixins';\n\n.settingsList {\n  @include gridLayout;\n}\n\n.title-row {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-content: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n}\n\n.title-name {\n  margin-bottom: 0;\n}\n\n.media-folder-name {\n  font-style: italic;\n  margin-bottom: 2rem;\n}\n\n.action-buttons {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  button {\n    width: 45%;\n  }\n}\n\n\n:host {\n  ::ng-deep {\n    .mat-card {\n      padding-bottom: 2rem;\n    }\n  }\n}\n\n\n",
                    "styleUrl": "./settings-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "AppService"
                    },
                    {
                        "name": "query",
                        "type": "AppQueries"
                    },
                    {
                        "name": "_dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "query",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"settingsList\">\n  <mat-card>\n    <div class=\"title-row\">\n      <h2 class=\"mat-h2 title-name\">Media folder</h2>\n      <mat-icon svgIcon=\"folder\"></mat-icon>\n    </div>\n\n    <p class=\"media-folder-name\">{{ (config$ | async).mediaFolder}}</p>\n\n    <div class=\"action-buttons\">\n      <button (click)=\"openMediaFolderExplorer()\" color=\"accent\"\n              mat-raised-button>\n        <mat-icon svgIcon=\"launch\"></mat-icon>\n        Open Media Folder\n      </button>\n      <button (click)=\"openMediaFolderDialog()\" color=\"primary\"\n              mat-raised-button>\n        <mat-icon svgIcon=\"edit\"></mat-icon>\n        Change Media Folder\n      </button>\n    </div>\n  </mat-card>\n\n  <mat-card>\n    <div class=\"title-row\">\n      <h2 class=\"mat-h2 title-name\">Twitch Channel Name</h2>\n      <app-twitch-icon></app-twitch-icon>\n    </div>\n\n    <app-twitch-setting></app-twitch-setting>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "SimpleConfirmationDialogComponent",
            "id": "component-SimpleConfirmationDialogComponent-f3dc87a8d20d09234c5a71f6d02afbe4",
            "file": "src/app/shared/components/dialogs/simple-confirmation-dialog/simple-confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-simple-confirmation-dialog",
            "styleUrls": [
                "./simple-confirmation-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./simple-confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "ConfirmationsPayload",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\n\nexport interface ConfirmationsPayload {\n  title: string;\n  content?: string;\n}\n\n@Component({\n  selector: 'app-simple-confirmation-dialog',\n  templateUrl: './simple-confirmation-dialog.component.html',\n  styleUrls: ['./simple-confirmation-dialog.component.css']\n})\nexport class SimpleConfirmationDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ConfirmationsPayload) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./simple-confirmation-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ConfirmationsPayload"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ConfirmationsPayload",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title>{{data.title}}</h2>\n<mat-dialog-content *ngIf=\"data.content\" class=\"mat-typography\">\n  {{data.content}}\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>No</button>\n  <button [mat-dialog-close]=\"true\" cdkFocusInitial mat-button>Yes</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "StyleguideComponent",
            "id": "component-StyleguideComponent-fa1880db2b2c8263415a3207e155c739",
            "file": "src/app/shared/styleguide/styleguide.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-styleguide",
            "styleUrls": [
                "./styleguide.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./styleguide.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\n    {\n      name: '--highlighter-pink',\n      hex: '#ef5777',\n    },\n    {\n      name: '--sizzling-red',\n      hex: '#f53b57',\n    },\n    {\n      name: '--dark-periwinkle',\n      hex: '#575fcf',\n    },\n    {\n      name: '--free-speech-blue',\n      hex: '#3c40c6',\n    },\n    {\n      name: '--megaman',\n      hex: '#4bcffa',\n    },\n    {\n      name: '--spiro-disco-ball',\n      hex: '#0fbcf9',\n    },\n    {\n      name: '--fresh-turquoise',\n      hex: '#34e7e4',\n    },\n    {\n      name: '--jade-dust',\n      hex: '#00d8d6',\n    },\n    {\n      name: '--minty-green',\n      hex: '#0be881',\n    },\n    {\n      name: '--green-teal',\n      hex: '#05c46b',\n    },\n    {\n      name: '--narenji-orange',\n      hex: '#ffc048',\n    },\n    {\n      name: '--chrome-yellow',\n      hex: '#ffa801',\n    },\n    {\n      name: '--yriel-yellow',\n      hex: '#ffdd59',\n    },\n    {\n      name: '--vibrant-yellow',\n      hex: '#ffd32a',\n    },\n    {\n      name: '--sunset-orange',\n      hex: '#ff5e57',\n    },\n    {\n      name: '--red-orange',\n      hex: '#ff3f34',\n    },\n    {\n      name: '--hint-of-elusive-blue',\n      hex: '#d2dae2',\n    },  {\n      name: '--london-square',\n      hex: '#808e9b',\n    },\n    {\n      name: '--increase-luminance-of-electromagnetic',\n      hex: '#3F4855',\n    },\n    {\n      name: '--electromagnetic',\n      hex: '#2f3640',\n    },\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\nexport const StyleguideColors = {\n  background: '#2f3640', // todo add custom css var\n  foreground: '#ffffff',\n  primary: '#4bcffa',\n  accent: '#575fcf',\n  warn: '#f53b57',\n  highlight: '#00d8d6', // todo add custom css var\n  chipSelected: '#ffd32a'\n}\n\n\n@Component({\n  selector: 'app-styleguide',\n  templateUrl: './styleguide.component.html',\n  styleUrls: ['./styleguide.component.scss']\n})\nexport class StyleguideComponent implements OnInit {\n  colors = [\n    {\n      name: '--highlighter-pink',\n      hex: '#ef5777',\n    },\n    {\n      name: '--sizzling-red',\n      hex: '#f53b57',\n    },\n    {\n      name: '--dark-periwinkle',\n      hex: '#575fcf',\n    },\n    {\n      name: '--free-speech-blue',\n      hex: '#3c40c6',\n    },\n    {\n      name: '--megaman',\n      hex: '#4bcffa',\n    },\n    {\n      name: '--spiro-disco-ball',\n      hex: '#0fbcf9',\n    },\n    {\n      name: '--fresh-turquoise',\n      hex: '#34e7e4',\n    },\n    {\n      name: '--jade-dust',\n      hex: '#00d8d6',\n    },\n    {\n      name: '--minty-green',\n      hex: '#0be881',\n    },\n    {\n      name: '--green-teal',\n      hex: '#05c46b',\n    },\n    {\n      name: '--narenji-orange',\n      hex: '#ffc048',\n    },\n    {\n      name: '--chrome-yellow',\n      hex: '#ffa801',\n    },\n    {\n      name: '--yriel-yellow',\n      hex: '#ffdd59',\n    },\n    {\n      name: '--vibrant-yellow',\n      hex: '#ffd32a',\n    },\n    {\n      name: '--sunset-orange',\n      hex: '#ff5e57',\n    },\n    {\n      name: '--red-orange',\n      hex: '#ff3f34',\n    },\n    {\n      name: '--hint-of-elusive-blue',\n      hex: '#d2dae2',\n    },  {\n      name: '--london-square',\n      hex: '#808e9b',\n    },\n    {\n      name: '--increase-luminance-of-electromagnetic',\n      hex: '#3F4855',\n    },\n    {\n      name: '--electromagnetic',\n      hex: '#2f3640',\n    },\n  ]\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n// https://stackoverflow.com/a/47497820\n// https://flatuicolors.com/palette/se\n\n:host {\n  width: 100%;\n  max-width: 800px;\n  height: 32px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.colorBlocks {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: fixed;\n  width: 100%;\n  bottom: 0;\n}\n\n.colorBlocks__block {\n  height: 100px;\n  display: flex;\n  font-family: Barlow, sans-serif;\n  font-size: 12px;\n  padding: 5px;\n}\n\n\n\n\n\n\n\n\n\n\n",
                    "styleUrl": "./styleguide.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 100
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"colorBlocks\" >\n  <div class=\"colorBlocks__block\" *ngFor=\"let color of colors\"\n  [style.backgroundColor]=\"color.hex\">{{ color.name }}</div>\n</div>\n"
        },
        {
            "name": "TargetScreenComponent",
            "id": "component-TargetScreenComponent-5c78540221447d48d378f522d5cb0738",
            "file": "src/app/target-screen/target-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-target-screen",
            "styleUrls": [
                "./target-screen.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./target-screen.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "assignedClipsMap$",
                    "defaultValue": "combineLatest([\n    this.screenId$.pipe(\n      filter(screenId => !!screenId)\n    ),\n    this.appQuery.screenMap$.pipe(\n      filter(screenMap => !!screenMap)\n    )\n  ]).pipe(\n    filter(([screenId, screenMap]) => !!screenMap[screenId]),\n    map(([screenId, screenMap]) => screenMap[screenId].clips)\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "clipToControlMap",
                    "defaultValue": "new WeakMap<Clip, HTMLVideoElement | HTMLAudioElement | HTMLImageElement>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "debug$",
                    "defaultValue": "this.route.queryParams.pipe(\n    map(queryParams => queryParams['debug'] === 'true')\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "log",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "mediaClipMap$",
                    "defaultValue": "combineLatest([\n    this.assignedClipsMap$,\n    this.appQuery.clipMap$\n  ]).pipe(\n    map(([assignedClips, allClips]) => {\n      const result: Dictionary<CombinedClip> = {};\n\n      for (const [key, entry] of Object.entries(assignedClips)) {\n        result[key] = {\n          clipSetting: entry,\n          clip: allClips[key],\n          backgroundColor: this.random_rgba()\n        }\n      }\n\n      return result;\n    })\n  )",
                    "type": "Observable<Dictionary<CombinedClip>>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "mediaClipToShow$",
                    "defaultValue": "new BehaviorSubject<string>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "screenId$",
                    "defaultValue": "new BehaviorSubject<string>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "addLog",
                    "args": [
                        {
                            "name": "load",
                            "type": "string"
                        },
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "load",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToMap",
                    "args": [
                        {
                            "name": "value",
                            "type": "Clip"
                        },
                        {
                            "name": "element",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Clip",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideIfStillPlaying",
                    "args": [
                        {
                            "name": "entry",
                            "type": "KeyValue<string | CombinedClip>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "KeyValue<string | CombinedClip>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "random_rgba",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 188
                },
                {
                    "name": "shouldPlay$",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 170,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, OnDestroy, OnInit} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from \"rxjs\";\nimport {Clip, Dictionary, ScreenClip} from \"@memebox/contracts\";\nimport {distinctUntilChanged, filter, map, pairwise, take, takeUntil, withLatestFrom} from \"rxjs/operators\";\nimport {AppQueries} from \"../state/app.queries\";\nimport {AppService} from \"../state/app.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {KeyValue} from \"@angular/common\";\nimport {WebsocketService} from \"../core/services/websocket.service\";\n\ninterface CombinedClip {\n  clip: Clip;\n  clipSetting: ScreenClip;\n  backgroundColor: string;\n}\n\n@Component({\n  selector: 'app-target-screen',\n  templateUrl: './target-screen.component.html',\n  styleUrls: ['./target-screen.component.scss']\n})\nexport class TargetScreenComponent implements OnInit, OnDestroy {\n\n  log = [];\n\n  debug$ = this.route.queryParams.pipe(\n    map(queryParams => queryParams['debug'] === 'true')\n  );\n\n  screenId$ = new BehaviorSubject<string>(null);\n\n  assignedClipsMap$ = combineLatest([\n    this.screenId$.pipe(\n      filter(screenId => !!screenId)\n    ),\n    this.appQuery.screenMap$.pipe(\n      filter(screenMap => !!screenMap)\n    )\n  ]).pipe(\n    filter(([screenId, screenMap]) => !!screenMap[screenId]),\n    map(([screenId, screenMap]) => screenMap[screenId].clips)\n  );\n\n  mediaClipMap$: Observable<Dictionary<CombinedClip>> = combineLatest([\n    this.assignedClipsMap$,\n    this.appQuery.clipMap$\n  ]).pipe(\n    map(([assignedClips, allClips]) => {\n      const result: Dictionary<CombinedClip> = {};\n\n      for (const [key, entry] of Object.entries(assignedClips)) {\n        result[key] = {\n          clipSetting: entry,\n          clip: allClips[key],\n          backgroundColor: this.random_rgba()\n        }\n      }\n\n      return result;\n    })\n  );\n  mediaClipToShow$ = new BehaviorSubject<string>(null);\n  clipToControlMap = new WeakMap<Clip, HTMLVideoElement | HTMLAudioElement | HTMLImageElement>();\n\n  private _destroy$ = new Subject();\n\n  constructor(private appQuery: AppQueries,\n              private appService: AppService,\n              private route: ActivatedRoute,\n              private wsService: WebsocketService,\n              private element: ElementRef<HTMLElement>) {\n  }\n\n\n  ngOnInit(): void {\n    this.appService.loadState();\n\n    this.debug$.pipe(\n      distinctUntilChanged(),\n      takeUntil(this._destroy$)\n    ).subscribe(value => {\n      if (value) {\n        this.element.nativeElement.classList.add('debug-mode');\n      } else{\n        this.element.nativeElement.classList.remove('debug-mode');\n      }\n    })\n\n    const thisScreenId = this.route.snapshot.params.guid;\n\n    this.wsService.onOpenConnection$.pipe(\n      take(1)\n    ).subscribe(value => {\n      this.wsService.sendI_Am_OBS(thisScreenId);\n    })\n\n    this.wsService.onUpdateData$.pipe(\n      takeUntil(this._destroy$),\n    ).subscribe(value => {\n      this.appService.loadState();\n    });\n\n    this.wsService.onTriggerClip$.pipe(\n      takeUntil(this._destroy$)\n    ).subscribe(clip => {\n      if (clip.targetScreen === thisScreenId) {\n        console.error('YES TRIGGERING IT', {clip});\n\n        this.mediaClipToShow$.next(clip.id);\n      }\n    });\n\n    this.screenId$.next(this.route.snapshot.params.guid);\n\n    // TODO Fix , multiple triggers of clips..\n    // Only one clip can shown at once\n    // if a 2nd one is added, it can hide the first one ...\n\n    this.mediaClipToShow$.pipe(\n      filter(clip => !!clip),\n      withLatestFrom(this.mediaClipMap$),\n      takeUntil(this._destroy$)\n    ).subscribe(([clipIdToPlay, mediaClipMap]) => {\n      const mediaInformation = mediaClipMap[clipIdToPlay];\n\n      const control = this.clipToControlMap.get(mediaInformation.clip);\n\n      if (control instanceof HTMLAudioElement\n        || control instanceof HTMLVideoElement) {\n        control.currentTime = 0;\n        control.play();\n        console.info('play', control.readyState);\n      }\n\n      if (mediaInformation.clip.playLength) {\n        setTimeout(() => {\n          this.mediaClipToShow$.next(null);\n        }, mediaInformation.clip.playLength)\n      }\n    });\n\n    this.mediaClipToShow$.pipe(\n      pairwise(),\n      withLatestFrom(this.mediaClipMap$),\n      takeUntil(this._destroy$)\n    ).subscribe(([[prev, current], mediaClipMap]) => {\n      if (prev) {\n        const mediaInformation = mediaClipMap[prev];\n\n        const control = this.clipToControlMap.get(mediaInformation.clip);\n\n        if (control instanceof HTMLMediaElement) {\n          control.pause();\n          control.currentTime = 0;\n        }\n      }\n    })\n  }\n\n  addLog(load: string, $event: Event) {\n    console.info({load, $event});\n\n    this.log.push({\n      load,\n      $event,\n      time: new Date()\n    });\n  }\n\n  shouldPlay$(key: string) {\n    return this.mediaClipToShow$.pipe(\n      filter(mediaToShow => mediaToShow === key)\n    )\n  }\n\n  addToMap(value: Clip, element: any) {\n    this.clipToControlMap.set(value, element);\n  }\n\n  hideIfStillPlaying(entry: KeyValue<string, CombinedClip>) {\n    const currentlyPlaying = this.mediaClipToShow$.value;\n\n    if (currentlyPlaying == entry.key) {\n      this.mediaClipToShow$.next(null);\n    }\n  }\n\n  random_rgba() {\n    var o = Math.round, r = Math.random, s = 255;\n    return 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',0.34)';\n  }\n\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep {\n  // target-screens needs to be transparent for OBS\n  .mat-app-background {\n    background-color: transparent !important;\n  }\n}\n\nvideo, audio, img, iframe {\n  display: none;\n\n  &.visible {\n    display: block;\n  }\n}\n\n.clip-holder {\n  width: var(--clip-setting-width, 100%);\n  height: var(--clip-setting-height, 100%);\n\n  * {\n    width: 100%;\n    height: 100%;\n  }\n\n  &.picture {\n    * {\n      object-fit: var(--clip-setting-img-fit, contain);\n    }\n  }\n}\n\n.fullscreen {\n  position: absolute;\n}\n\n.absolute {\n  position: absolute;\n  bottom: var(--clip-setting-bottom, unset);\n  right: var(--clip-setting-right, unset);\n  top: var(--clip-setting-top, unset);\n  left: var(--clip-setting-left, unset);\n}\n\n:host{\n  .debug-name {\n    display: none;\n  }\n\n  &.debug-mode {\n    .debug-name {\n      display: block;\n    }\n\n    .clip-holder {\n      display: block;\n      background: var(--clip-background);\n    }\n  }\n}\n",
                    "styleUrl": "./target-screen.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appQuery",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "wsService",
                        "type": "WebsocketService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "appQuery",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wsService",
                        "type": "WebsocketService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- Notes\nThe Browser Elements need to exist all the time\nThe Loaded Clips need to stay cached?\n-->\n\n<div *ngFor=\"let entry of mediaClipMap$ | async | keyvalue\"\n     [class.absolute]=\"entry.value.clipSetting.position === 1\"\n     [class.fullscreen]=\"!entry.value.clipSetting.position\"\n     [ngSwitch]=\"entry.value.clip.type\"\n     [style.--clip-background]=\"entry.value.backgroundColor\"\n     [style.--clip-setting-bottom]=\"entry.value.clipSetting.bottom\"\n     [style.--clip-setting-height]=\"entry.value.clipSetting.height\"\n     [style.--clip-setting-img-fit]=\"entry.value.clipSetting.imgFit\"\n     [style.--clip-setting-left]=\"entry.value.clipSetting.left\"\n     [style.--clip-setting-right]=\"entry.value.clipSetting.right\"\n     [style.--clip-setting-top]=\"entry.value.clipSetting.top\"\n     [style.--clip-setting-width]=\"entry.value.clipSetting.width\"\n     class=\"clip-holder {{ entry.value.clip.type | mediaTypeClass }}\"\n>\n  <span class=\"debug-name\">{{ entry.value.clip.name }}</span>\n\n  <video #video *ngSwitchCase=\"2\"\n         (canplay)=\"addLog('canplay', $event)\"\n         (canplaythrough)=\"addLog('canplaythrough', $event)\"\n         (ended)=\"addLog('ended', $event); hideIfStillPlaying(entry)\"\n         (loadeddata)=\"addLog('loadeddata', $event)\"\n         (loadedmetadata)=\"addLog('loadedmetadata', $event)\"\n         (loadstart)=\"addLog('loadstart', $event); addToMap(entry.value.clip, video)\"\n         (play)=\"addLog('play', $event)\"\n         (playing)=\"addLog('playing', $event)\"\n         (progress)=\"addLog('progress', $event)\"\n         [class.visible]=\"shouldPlay$(entry.key) | async\"\n         [src]=\"entry.value.clip.path\"\n         [volume]=\"entry.value.clip.volumeSetting / 100\"\n  ></video>\n  <audio #audio *ngSwitchCase=\"1\"\n         (ended)=\"addLog('ended', $event); hideIfStillPlaying(entry)\"\n         (loadstart)=\"addToMap(entry.value.clip, audio)\"\n         (play)=\"addLog('play', $event)\"\n         (playing)=\"addLog('playing', $event)\"\n         [class.visible]=\"shouldPlay$(entry.key) | async\"\n         [src]=\"entry.value.clip.path\"\n         [volume]=\"entry.value.clip.volumeSetting / 100\"\n         controls\n         preload=\"auto\"\n  ></audio>\n  <img #img *ngSwitchCase=\"0\"\n       (loadstart)=\"addToMap(entry.value.clip, img)\"\n       [class.visible]=\"shouldPlay$(entry.key) | async\"\n       [src]=\"entry.value.clip.path\"\n  />\n  <iframe #iFrame *ngSwitchCase=\"3\"\n          [class.visible]=\"shouldPlay$(entry.key) | async\"\n          [src]=\"entry.value.clip.path | safeurl\">\n  </iframe>\n</div>\n\n<pre style=\"display: none;\">\n  {{ log | json }}\n  {{ mediaClipMap$ | async | json }}\n</pre>\n"
        },
        {
            "name": "TwitchEditComponent",
            "id": "component-TwitchEditComponent-10ff8bd7504e44ed399faad4df091808",
            "file": "src/app/shared/components/dialogs/twitch-edit/twitch-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-twitch-edit",
            "styleUrls": [
                "./twitch-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./twitch-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clipList$",
                    "defaultValue": "this.appQuery.clipList$",
                    "type": "Observable<Clip[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "data",
                    "type": "Twitch",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormBuilder().group({\n    id: \"\",\n    name: \"\",\n    event: \"\",\n    clipId: \"\",\n    contains: \"\",\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "twitchEvents",
                    "defaultValue": "TwitchTypesArray",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {FormBuilder} from \"@angular/forms\";\nimport {Observable, Subject} from \"rxjs\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {Clip, Twitch, TwitchEventTypes, TwitchTypesArray} from \"@memebox/contracts\";\nimport {AppService} from \"../../../../state/app.service\";\nimport {AppQueries} from \"../../../../state/app.queries\";\nimport {SnackbarService} from \"../../../../core/services/snackbar.service\";\n\n// TODO better class/interface name?\nconst INITIAL_TWITCH: Partial<Twitch> = {\n  name: 'Your Twitch Event', // TODO better default value\n  event: TwitchEventTypes.message,\n  contains: '!wow',\n  active: true\n};\n\n@Component({\n  selector: 'app-twitch-edit',\n  templateUrl: './twitch-edit.component.html',\n  styleUrls: ['./twitch-edit.component.scss']\n})\nexport class TwitchEditComponent implements OnInit, OnDestroy {\n  public form = new FormBuilder().group({\n    id: \"\",\n    name: \"\",\n    event: \"\",\n    clipId: \"\",\n    contains: \"\",\n  });\n\n  twitchEvents = TwitchTypesArray;\n\n\n  clipList$: Observable<Clip[]> = this.appQuery.clipList$;\n\n\n  private _destroy$ = new Subject();\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Twitch,\n    private dialogRef: MatDialogRef<any>,\n    private appService: AppService,\n    private appQuery: AppQueries,\n    private snackBar: SnackbarService\n  ) {\n    this.data = this.data ?? (INITIAL_TWITCH as any);\n    console.info({data: this.data});\n  }\n\n  async save() {\n    if (!this.form.valid) {\n      // highlight hack\n      this.form.markAllAsTouched();\n      return;\n    }\n\n\n    const {value} = this.form;\n\n    const newTwitchValue = {\n      ...this.data,\n      ...value\n    };\n\n    console.info(newTwitchValue);\n    await this.appService.addOrUpdateTwitchEvent(newTwitchValue);\n\n    // todo refactor \"better way?\" to trigger those snackbars\n    this.snackBar.normal(`Twitch \"${newTwitchValue.name}\" ${newTwitchValue.id ? 'updated' : 'added'} 🎉`);\n\n    this.dialogRef.close();\n  }\n\n  ngOnInit(): void {\n    this.form.reset(this.data);\n  }\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  min-width: 400px;\n  max-width: 600px;\n}\n",
                    "styleUrl": "./twitch-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Twitch"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "appQuery",
                        "type": "AppQueries"
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Twitch",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appQuery",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title> {{ data.id ? 'Update ' : 'Add ' }} a Twitch Event </h2>\n<mat-dialog-content class=\"mat-typography\">\n\n  <form [formGroup]=\"form\">\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Name</mat-label>\n        <input autocomplete=\"off\"\n               formControlName=\"name\"\n               matInput>\n      </mat-form-field>\n\n\n    </div>\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Twitch Event</mat-label>\n        <mat-select [required]=\"true\"\n                    formControlName=\"event\">\n          <mat-option *ngFor=\"let item of twitchEvents\"\n                      [value]=\"item\">\n            {{ item }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n    </div>\n\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Meme</mat-label>\n        <mat-select [required]=\"true\"\n                    formControlName=\"clipId\">\n\n          <mat-option *ngFor=\"let item of clipList$ | async\"\n                      [value]=\"item.id\">\n            {{ item.name }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"form.controls['clipId'].hasError('required')\">\n          You need to select 'A media item'.\n        </mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Contains</mat-label>\n        <input autocomplete=\"off\"\n               formControlName=\"contains\"\n               matInput>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button (click)=\"save()\" cdkFocusInitial\n          color=\"primary\"\n          mat-raised-button>{{ data.id ? 'Update' : 'Add' }}</button>\n</mat-dialog-actions>\n\n"
        },
        {
            "name": "TwitchIconComponent",
            "id": "component-TwitchIconComponent-98341b203f39571d48fca627962af5ba",
            "file": "src/app/manage/settings/svg/twitch-icon/twitch-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-twitch-icon",
            "styleUrls": [
                "./twitch-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./twitch-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-twitch-icon',\n  templateUrl: './twitch-icon.component.html',\n  styleUrls: ['./twitch-icon.component.scss']\n})\nexport class TwitchIconComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./twitch-icon.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\" viewBox=\"0 0 512 512\">\n  <path\n    fill=\"currentColor\"\n    d=\"M391.17,103.47H352.54v109.7h38.63ZM285,103H246.37V212.75H285ZM120.83,0,24.31,91.42V420.58H140.14V512l96.53-91.42h77.25L487.69,256V0ZM449.07,237.75l-77.22,73.12H294.61l-67.6,64v-64H140.14V36.58H449.07Z\" />\n</svg>\n"
        },
        {
            "name": "TwitchSettingComponent",
            "id": "component-TwitchSettingComponent-b326ac3f926aa6c9d4e9a2f6a1805276",
            "file": "src/app/manage/settings/twitch-setting/twitch-setting.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-twitch-setting",
            "styleUrls": [
                "./twitch-setting.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./twitch-setting.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormBuilder().group({\n    name: ''\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "toggleOrSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormBuilder} from \"@angular/forms\";\nimport {AppQueries} from \"../../../state/app.queries\";\nimport {AppService} from \"../../../state/app.service\";\nimport {Subject} from \"rxjs\";\nimport {filter, take} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-twitch-setting',\n  templateUrl: './twitch-setting.component.html',\n  styleUrls: ['./twitch-setting.component.scss']\n})\nexport class TwitchSettingComponent implements OnInit, OnDestroy {\n  public form = new FormBuilder().group({\n    name: ''\n  });\n\n  public editMode = false;\n\n  private _destroy$ = new Subject();\n\n  constructor(private appQuery: AppQueries,\n              private appService: AppService) {\n\n  }\n\n  ngOnInit(): void {\n    this.form.reset({\n      name: 'my-channel'\n    });\n\n    this.appQuery.config$.pipe(\n      filter(config => !!config.twitchChannel),\n      take(1),\n    ).subscribe(value => {\n      this.form.reset({\n        name: value.twitchChannel\n      });\n    });\n\n\n  }\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  async save() {\n    if (!this.form.valid) {\n      // highlight hack\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.editMode = false;\n    await this.appService.updateTwitchChannel(this.form.value.name);\n  }\n\n  toggleOrSave() {\n    if (this.editMode) {\n      this.save();\n    } else {\n      this.editMode = true;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./twitch-setting.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appQuery",
                        "type": "AppQueries"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "appQuery",
                        "type": "AppQueries",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "  <form [formGroup]=\"form\">\n\n    <div class=\"example-container\">\n      <mat-form-field >\n        <mat-label>Account</mat-label>\n        <input autocomplete=\"off\" [readonly]=\"!editMode\"\n               formControlName=\"name\" (keyup.enter)=\"save()\"\n               matInput required>\n\n        <mat-error *ngIf=\"form.controls['name'].hasError('required')\">\n          Please enter your Twitch channel name\n        </mat-error>\n\n        <button (click)=\"toggleOrSave()\" matSuffix\n                color=\"primary\"\n                mat-raised-button>{{editMode ? 'Update' : 'Edit'}}</button>\n\n      </mat-form-field>\n\n\n    </div>\n  </form>\n\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MediaTypeClassPipe"
                        },
                        {
                            "name": "TargetScreenComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": ""
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "DialogsModule"
                        },
                        {
                            "name": "ServicesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClipAssigningDialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClipAssigningDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClipTypeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClipTypeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClipTypeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigMediaPathModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfigMediaPathComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MediaEditComponent"
                        },
                        {
                            "name": "ScreenClipOptionsComponent"
                        },
                        {
                            "name": "ScreenEditComponent"
                        },
                        {
                            "name": "SimpleConfirmationDialogComponent"
                        },
                        {
                            "name": "TwitchEditComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GettingStartedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GettingStartedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GettingStartedComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MainPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NavigationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MediaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MediaInfoComponent"
                        },
                        {
                            "name": "MediaOverviewComponent"
                        },
                        {
                            "name": "MediaTypePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClipTypeModule"
                        },
                        {
                            "name": "ConfigMediaPathModule"
                        },
                        {
                            "name": "GettingStartedModule"
                        },
                        {
                            "name": "ScreenAssigningDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MediaOverviewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MobileModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MobileClipOverviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClipTypeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavigationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "QrcodeDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QrcodeDialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MobileViewLinkComponent"
                        },
                        {
                            "name": "QrcodeDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScreenAssigningDialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScreenAssigningDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScreensModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScreenInfoComponent"
                        },
                        {
                            "name": "ScreenOverviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClipAssigningDialogModule"
                        },
                        {
                            "name": "ClipTypeModule"
                        },
                        {
                            "name": "GettingStartedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ServicesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SettingsOverviewComponent"
                        },
                        {
                            "name": "TwitchIconComponent"
                        },
                        {
                            "name": "TwitchSettingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "WebviewDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WebviewDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StateModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StyleguideModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StyleguideComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StyleguideComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TwitchModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddEventComponent"
                        },
                        {
                            "name": "EventInfoComponent"
                        },
                        {
                            "name": "EventsOverviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "API_BASE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/app.service.ts",
                "type": "",
                "defaultValue": "`${EXPRESS_BASE}${API_PREFIX}/`"
            },
            {
                "name": "AppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.dev.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  environment: 'DEV',\n  ngModules: [\n    NgErrorOverlayModule\n  ]\n}"
            },
            {
                "name": "AppConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  environment: 'PROD',\n  ngModules: [\n\n  ]\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/contracts/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "ENDPOINTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/contracts/src/lib/constants.ts",
                "type": "object",
                "defaultValue": "{\n  CLIPS: 'clips',\n  SCREEN: 'screen',\n  OBS_CLIPS: 'clips',\n  TWITCH_EVENTS: 'twitch_events',\n  NETWORK_LIST: 'network_ip_list',\n  CONFIG_MEDIA_PATH: 'config/media',\n  CONFIG_TWITCH_CHANNEL: 'config/twitchChannel'\n}"
            },
            {
                "name": "EXPRESS_BASE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/app.service.ts",
                "type": "",
                "defaultValue": "`http://${location.hostname}:${EXPRESS_PORT}`"
            },
            {
                "name": "INITIAL_CLIP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/dialogs/media-edit/media-edit.component.ts",
                "type": "Partial<Clip>",
                "defaultValue": "{\n  type: MediaType.Picture,\n  name: 'Media Filename',\n  volumeSetting: 10,\n  playLength: 600,\n  clipLength: 600, // TODO once its possible to get the data from the clip itself\n}"
            },
            {
                "name": "INITIAL_TWITCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/dialogs/twitch-edit/twitch-edit.component.ts",
                "type": "Partial<Twitch>",
                "defaultValue": "{\n  name: 'Your Twitch Event', // TODO better default value\n  event: TwitchEventTypes.message,\n  contains: '!wow',\n  active: true\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/contracts/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SettingMobileColumnSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mobile/mobile-clip-overview/mobile-clip-overview.component.ts",
                "type": "string",
                "defaultValue": "'MOBILE_COLUMN_SIZE'"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SNACKBAR_DURATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/snackbar.service.ts",
                "type": "number",
                "defaultValue": "3000"
            },
            {
                "name": "StyleguideColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/styleguide/styleguide.component.ts",
                "type": "object",
                "defaultValue": "{\n  background: '#2f3640', // todo add custom css var\n  foreground: '#ffffff',\n  primary: '#4bcffa',\n  accent: '#575fcf',\n  warn: '#f53b57',\n  highlight: '#00d8d6', // todo add custom css var\n  chipSelected: '#ffd32a'\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "TwitchTypesArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/contracts/src/lib/constants.ts",
                "type": "[]",
                "defaultValue": "[\n  TwitchEventTypes.follow,\n  TwitchEventTypes.sub,\n  TwitchEventTypes.bits,\n  TwitchEventTypes.channelPoints,\n  TwitchEventTypes.host,\n  TwitchEventTypes.message,\n  TwitchEventTypes.raid,\n]"
            }
        ],
        "functions": [
            {
                "name": "createInitialState",
                "file": "projects/contracts/src/lib/createInitialState.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "SettingsState"
            },
            {
                "name": "createLocalOrProductionUrlBase",
                "file": "src/app/manage/screen/screen-overview/screen-overview.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "returnType": "TranslateHttpLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "HideAfterType",
                "childs": [
                    {
                        "name": "Playing"
                    },
                    {
                        "name": "Milliseconds"
                    },
                    {
                        "name": "Repeats"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/contracts/src/lib/types.ts"
            },
            {
                "name": "MediaType",
                "childs": [
                    {
                        "name": "Picture"
                    },
                    {
                        "name": "Audio"
                    },
                    {
                        "name": "Video"
                    },
                    {
                        "name": "IFrame"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/contracts/src/lib/types.ts"
            },
            {
                "name": "PositionEnum",
                "childs": [
                    {
                        "name": "FullScreen"
                    },
                    {
                        "name": "Absolute"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/contracts/src/lib/types.ts"
            },
            {
                "name": "TwitchEventTypes",
                "childs": [
                    {
                        "name": "message",
                        "value": "message"
                    },
                    {
                        "name": "follow",
                        "value": "follow"
                    },
                    {
                        "name": "sub",
                        "value": "sub"
                    },
                    {
                        "name": "bits",
                        "value": "bits"
                    },
                    {
                        "name": "raid",
                        "value": "raid"
                    },
                    {
                        "name": "host",
                        "value": "host"
                    },
                    {
                        "name": "channelPoints",
                        "value": "channelPoints"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/contracts/src/lib/types.ts"
            }
        ],
        "groupedVariables": {
            "src/app/state/app.service.ts": [
                {
                    "name": "API_BASE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/app.service.ts",
                    "type": "",
                    "defaultValue": "`${EXPRESS_BASE}${API_PREFIX}/`"
                },
                {
                    "name": "EXPRESS_BASE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/app.service.ts",
                    "type": "",
                    "defaultValue": "`http://${location.hostname}:${EXPRESS_PORT}`"
                }
            ],
            "src/environments/environment.dev.ts": [
                {
                    "name": "AppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.dev.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  environment: 'DEV',\n  ngModules: [\n    NgErrorOverlayModule\n  ]\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "AppConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  environment: 'PROD',\n  ngModules: [\n\n  ]\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "projects/contracts/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/contracts/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/contracts/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/contracts/src/lib/constants.ts": [
                {
                    "name": "ENDPOINTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/contracts/src/lib/constants.ts",
                    "type": "object",
                    "defaultValue": "{\n  CLIPS: 'clips',\n  SCREEN: 'screen',\n  OBS_CLIPS: 'clips',\n  TWITCH_EVENTS: 'twitch_events',\n  NETWORK_LIST: 'network_ip_list',\n  CONFIG_MEDIA_PATH: 'config/media',\n  CONFIG_TWITCH_CHANNEL: 'config/twitchChannel'\n}"
                },
                {
                    "name": "TwitchTypesArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/contracts/src/lib/constants.ts",
                    "type": "[]",
                    "defaultValue": "[\n  TwitchEventTypes.follow,\n  TwitchEventTypes.sub,\n  TwitchEventTypes.bits,\n  TwitchEventTypes.channelPoints,\n  TwitchEventTypes.host,\n  TwitchEventTypes.message,\n  TwitchEventTypes.raid,\n]"
                }
            ],
            "src/app/shared/components/dialogs/media-edit/media-edit.component.ts": [
                {
                    "name": "INITIAL_CLIP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/dialogs/media-edit/media-edit.component.ts",
                    "type": "Partial<Clip>",
                    "defaultValue": "{\n  type: MediaType.Picture,\n  name: 'Media Filename',\n  volumeSetting: 10,\n  playLength: 600,\n  clipLength: 600, // TODO once its possible to get the data from the clip itself\n}"
                }
            ],
            "src/app/shared/components/dialogs/twitch-edit/twitch-edit.component.ts": [
                {
                    "name": "INITIAL_TWITCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/dialogs/twitch-edit/twitch-edit.component.ts",
                    "type": "Partial<Twitch>",
                    "defaultValue": "{\n  name: 'Your Twitch Event', // TODO better default value\n  event: TwitchEventTypes.message,\n  contains: '!wow',\n  active: true\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/mobile/mobile-clip-overview/mobile-clip-overview.component.ts": [
                {
                    "name": "SettingMobileColumnSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mobile/mobile-clip-overview/mobile-clip-overview.component.ts",
                    "type": "string",
                    "defaultValue": "'MOBILE_COLUMN_SIZE'"
                }
            ],
            "src/app/core/services/snackbar.service.ts": [
                {
                    "name": "SNACKBAR_DURATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/snackbar.service.ts",
                    "type": "number",
                    "defaultValue": "3000"
                }
            ],
            "src/app/shared/styleguide/styleguide.component.ts": [
                {
                    "name": "StyleguideColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/styleguide/styleguide.component.ts",
                    "type": "object",
                    "defaultValue": "{\n  background: '#2f3640', // todo add custom css var\n  foreground: '#ffffff',\n  primary: '#4bcffa',\n  accent: '#575fcf',\n  warn: '#f53b57',\n  highlight: '#00d8d6', // todo add custom css var\n  chipSelected: '#ffd32a'\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/contracts/src/lib/createInitialState.ts": [
                {
                    "name": "createInitialState",
                    "file": "projects/contracts/src/lib/createInitialState.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "SettingsState"
                }
            ],
            "src/app/manage/screen/screen-overview/screen-overview.component.ts": [
                {
                    "name": "createLocalOrProductionUrlBase",
                    "file": "src/app/manage/screen/screen-overview/screen-overview.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "returnType": "TranslateHttpLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/contracts/src/lib/types.ts": [
                {
                    "name": "HideAfterType",
                    "childs": [
                        {
                            "name": "Playing"
                        },
                        {
                            "name": "Milliseconds"
                        },
                        {
                            "name": "Repeats"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/contracts/src/lib/types.ts"
                },
                {
                    "name": "MediaType",
                    "childs": [
                        {
                            "name": "Picture"
                        },
                        {
                            "name": "Audio"
                        },
                        {
                            "name": "Video"
                        },
                        {
                            "name": "IFrame"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/contracts/src/lib/types.ts"
                },
                {
                    "name": "PositionEnum",
                    "childs": [
                        {
                            "name": "FullScreen"
                        },
                        {
                            "name": "Absolute"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/contracts/src/lib/types.ts"
                },
                {
                    "name": "TwitchEventTypes",
                    "childs": [
                        {
                            "name": "message",
                            "value": "message"
                        },
                        {
                            "name": "follow",
                            "value": "follow"
                        },
                        {
                            "name": "sub",
                            "value": "sub"
                        },
                        {
                            "name": "bits",
                            "value": "bits"
                        },
                        {
                            "name": "raid",
                            "value": "raid"
                        },
                        {
                            "name": "host",
                            "value": "host"
                        },
                        {
                            "name": "channelPoints",
                            "value": "channelPoints"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/contracts/src/lib/types.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "rootRoutes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "manage",
                        "loadChildren": "./manage/main-page/main-page.module#MainPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "MainPageModule"
                            }
                        ]
                    },
                    {
                        "path": "screen/:guid",
                        "component": "TargetScreenComponent"
                    },
                    {
                        "path": "mobile",
                        "loadChildren": "./mobile/mobile.module#MobileModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/mobile/mobile.module.ts",
                                        "module": "MobileModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MobileClipOverviewComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MobileModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "manage"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/contracts/src/lib/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TriggerClip",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENDPOINTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TwitchTypesArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/createInitialState.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Clip",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Config",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dictionary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileInfo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HasId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NetworkInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Screen",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenClip",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenViewEntry",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsState",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Twitch",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/contracts/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pipes/safe-url/safe-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/snackbar.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SNACKBAR_DURATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/websocket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/main-page/main-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/media/media-overview/config-media-path/config-media-path.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigMediaPathComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/media/media-overview/media-info/media-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/media/media-overview/media-info/media-type.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MediaTypePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/media/media-overview/media-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/media/media-overview/screen-assigning-dialog/screen-assigning-dialog/screen-assigning-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenAssigningDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/qrcode-dialog/mobile-view-link/mobile-view-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MobileViewLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/qrcode-dialog/qrcode-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QrcodeDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/screen/screen-overview/clip-assigning-dialog/clip-assigning-dialog/clip-assigning-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClipAssigningDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/screen/screen-overview/screen-info/screen-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/screen/screen-overview/screen-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/screen/screen-overview/screen-overview.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createLocalOrProductionUrlBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/settings/settings-overview/settings-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/settings/svg/twitch-icon/twitch-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwitchIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/settings/twitch-setting/twitch-setting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwitchSettingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/twitch/events-overview/add-event/add-event.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/twitch/events-overview/event-info/event-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/manage/twitch/events-overview/events-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventsOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/mobile/mobile-clip-overview/mobile-clip-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MobileClipOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/mobile/mobile-clip-overview/mobile-clip-overview.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SettingMobileColumnSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/clip-type/clip-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClipTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/media-edit/media-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/media-edit/media-edit.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_CLIP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/screen-clip-options/screen-clip-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenClipOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/screen-clip-options/screen-clip-options.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenClipOptionsPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/screen-edit/screen-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/simple-confirmation-dialog/simple-confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/simple-confirmation-dialog/simple-confirmation-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmationsPayload",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/twitch-edit/twitch-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwitchEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialogs/twitch-edit/twitch-edit.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_TWITCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/getting-started/getting-started.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GettingStartedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/webview/webview.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "WebviewDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/styleguide/styleguide.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StyleguideComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/styleguide/styleguide.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StyleguideColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.queries.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppQueries",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_BASE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPRESS_BASE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/target-screen/media-type-class.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MediaTypeClassPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/target-screen/target-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TargetScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/target-screen/target-screen.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CombinedClip",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}