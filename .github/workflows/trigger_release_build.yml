# This is a basic workflow to help you get started with Actions

name: Release on Webhook

on:
  workflow_dispatch:
    inputs:
      tag-name:
        description: Tag-Name or Version
        required: true

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      uploadURL: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - run: npm install
      - run: npm run build:prepare
      - run: npm run build:all

      - name: Uploading Angular Dist Files
        uses: actions/upload-artifact@v2
        with:
          name: angular-dist
          path: dist

      - run: npm run electron:build:only

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag-name }}
          release_name: Release V${{ github.event.inputs.tag-name }}
          draft: false
          prerelease: true
      - name: Upload Release Asset Windows Headless
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/out/memebox.exe
          asset_name: memebox-headless.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Release Asset Linux Headless
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/out/memebox-linux
          asset_name: memebox-linux-headless
          asset_content_type: application/octet-stream


      - name: Upload Release Asset Mac Headless
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/out/memebox-macos
          asset_name: memebox-macos-headless
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Linux Electron
        id: upload-release-asset-linux-electron
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release-electron/memebox-electron.AppImage
          asset_name: memebox-linux-electron
          asset_content_type: application/octet-stream

  windows:
    name: Build and Upload Windows Electron
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2

      - run: npm install

      - name: Download Angular Output from build
        uses: actions/download-artifact@v2
        with:
          name: angular-dist

      - run: npm run electron:build:only

      - name: Upload Release Asset Windows Electron
        id: upload-release-asset-windows-electron
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build.output.uploadURL }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release-electron/memebox-electron.exe
          asset_name: memebox-windows-electron
          asset_content_type: application/octet-stream

  mac:
    name: Build and Upload MacOS Electron
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2

      - run: npm install

      - name: Download Angular Output from build
        uses: actions/download-artifact@v2
        with:
          name: angular-dist

      - run: npm run electron:build:only

      - name: Upload Release Asset Mac Electron
        id: upload-release-asset-Mac-electron
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build.output.uploadURL }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release-electron/memebox-electron
          asset_name: memebox-mac-electron
          asset_content_type: application/octet-stream
